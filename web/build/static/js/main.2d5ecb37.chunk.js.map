{"version":3,"sources":["assets/login.png","helpers/general.js","store/actions/user.js","store/actions/loading.js","store/actions/toast.js","services/api.js","pages/Login/index.js","components/AppBar/index.js","pages/Dashboard/index.js","pages/Collect/index.js","pages/ImportCollects/index.js","pages/Companie/index.js","pages/Attendance/index.js","pages/NotFound/index.js","pages/Client/index.js","pages/User/index.js","services/asaas.js","pages/Billet/index.js","Routes.js","store/reducers/loading.js","store/reducers/toast.js","store/reducers/callback.js","store/reducers/user.js","store/reducers/index.js","store/index.js","components/Loading/index.js","components/ToastApp/index.js","components/CallBack/index.js","store/actions/callback.js","App.js","serviceWorker.js","index.js","helpers/myFormat.js"],"names":["module","exports","getRandomColor","color","i","Math","floor","random","sleep","ms","Promise","resolve","setTimeout","setUser","id","name","hash","type","setLoading","visible","setToast","style","message","userUrl","String","window","location","href","slice","baseURL","console","log","api","axios","create","connect","state","props","history","useHistory","useState","username","setUsername","password","setPassword","handleLogin","e","a","preventDefault","dispatch","loadingActions","post","res","data","userActions","localStorage","setItem","push","toastActions","className","onSubmit","src","imgLogin","alt","htmlFor","value","onChange","target","Navbar","expand","Brand","onClick","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","Text","user","Link","header","headers","attendanceDataChart","setAttendanceDataChart","attendanceMonthTotal","setAttendanceMonthTotal","getDataAttendancesChart","get","negotiatedValues","dataValues","colorsValues","map","values","negotiated_value","date","labels","datasets","backgroundColor","hoverBackgroundColor","useEffect","textAlign","margin","marginTop","width","maxWidth","border","fontWeight","prefix","placeholder","decimalSeparator","groupSeparator","readOnly","show","setShow","registers","setRegisters","register","setRegister","isUpdating","setIsUpdating","searchField","setSearchField","search","setSearch","selectFilterField","setSelectFilterField","client","setClient","clientName","setClientName","clients","setClients","status","setStatus","companie","setCompanie","companieName","setCompanieName","companies","setCompanies","account","setAccount","document","setDocument","dtMaturity","setDtMaturity","days","setDays","setValue","updatedDebt","setUpdatedDebt","setDefaultHonorary","defaultInterest","setDefaultInterest","interestCalculed","setInterestCalculed","maximumDiscount","setMaximumDiscount","negotiatedValue","setNegotiatedValue","defaultPenalty","setDefaultPenalty","penaltyCalculed","setPenaltyCalculed","honoraryCalculed","setHonoraryCalculed","honoraryPer","setHonoraryPer","obs","setObs","loadRegisters","handleSubmit","calculate","regTemp","dt_maturity","updated_debt","maximum_discount","honorary_per","put","clearValues","handleDelete","delete","handleSearch","tempSearch","filter","find","toLowerCase","indexOf","client_name","client_document","client_phone","client_cellphone","setUpdating","reg","companie_name","default_interest","default_honorary","default_penalty","moment","_isValid","diff","calculedDays","parseFloat","strValueToFloat","toFixed","interest","floatValueToStr","penalty","honorary","debit","updateAllDebits","selected","onKeyPress","responsive","hover","bordered","cursor","key","toLocaleString","Modal","onHide","Header","Title","Body","inputValue","selection","itemToString","item","getInputProps","getItemProps","getMenuProps","isOpen","getRootProps","suppressRefError","marginRight","onChangeCapture","length","normalize","includes","format","onValueChange","formattedValue","onBlur","disabled","marginLeft","sheetFile","useRef","importedArray","setImportedArray","companieId","setCompanieId","loadCompanies","configStrTelephone","tel","telFormated","toString","replace","substring","insetOne","NOME_CLIENTE","cellphone","FONE_1","FONE_2","phone","FONE_3","DT_VENC","DESC_MAX","VLR_ORIGINARIO","registerOnBackend","then","readFile","sheet","f","current","files","FileReader","reader","readAsArrayBuffer","onload","Uint8Array","result","XLSX","arr","fromCharCode","bstr","join","workbook","first_sheet_name","SheetNames","worksheet","Sheets","sheet_to_json","raw","xlsxJSON","tempArray","json","configSheetStr","comp","ref","collect","__rowNum__","setName","cnpj","setCnpj","edress","setEdress","setPhone","responsibleStaff","setResponsibleStaff","dtContract","setDtContract","dtRenovation","setDtRenovation","defaultHonorary","monthlyValue","setMonthlyValue","payday","setPayDay","paymentType","setPaymentType","responsible_staff","dt_contract","dt_renovation","monthly_value","payment_type","decimalsLimit","grandMaximumDiscount","setGrandMaximumDiscount","aClient","setAClient","aClientName","setAClientName","getItem","aUser","setAUser","aUserName","setAUserName","aDtBegin","setADtBegin","aDtEnd","setADtEnd","aDescription","setADescription","aStatus","setAStatus","aNegotiatedValue","setANegotiatedValue","aGrandValue","setAGrandValue","aObs","setAObs","setCliClient","cliId","setCliId","cliCode","cliPhoneAdditional","setCliPhoneAdditional","cliEmailAdditional","setCliEmailAdditional","cliEdressAdditional","setCliEdressAdditional","cliName","setCliName","cliCellphone","setCliCellphone","cliPhone","setCliPhone","cliCompanie","setCliCompanie","cliCompanieName","setCliCompanieName","cliEmail","setCliEmail","setCliAttendance","cliDocumentType","setCliDocumentType","cliDocument","setCliDocument","cliEdress","setCliEdress","cliObs","setCliObs","cCollects","setCCollects","dt_begin","dt_end","description","grand_value","updateClient","closeCollectsByClient","getCollectsByAttendanceId","attendanceId","tempGrandMaximumDiscount","tempAGrandValue","getCollectsByClientId","setClientValues","phone_additional","email","email_additional","attendance","edress_additional","document_type","hide","code","clientId","user_name","Tabs","defaultActiveKey","Tab","eventKey","precision","setCode","setCellphone","phoneAdditional","setPhoneAdditional","emailAdditional","setEmailAdditional","edressAdditional","setEdressAdditional","setEmail","documentType","setDocumentType","error","mask","userName","setUserName","confirmPassword","setConfirmPassword","adress","setAdress","identitet","setIdentitet","on","setAttendance","dtGeneration","setDtGeneration","dtDue","setDtDue","qtParcel","setQtParcel","parcel","setParcel","billetTotal","setBilletTotal","asaasHeader","asaasBody","customer","billingType","dueDate","externalReference","postalService","asaas","dt_generation","dt_due","qt_parcel","billet_total","getByAttendance","exact","path","component","Login","Billet","NotFound","Dashboard","Attendance","Collect","ImportCollects","Companie","Client","User","INITIAL_STATE","table","combineReducers","loading","action","toast","callback","store","createStore","rootReducers","height","Spinner","animation","variant","Toast","autohide","delay","onClose","App","locale","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","str","r","flt"],"mappings":"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","file":"static/js/main.2d5ecb37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login.0b9d121c.png\";","\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nmodule.exports = {\n    getRandomColor,\n    sleep\n}","\nexport function setUser(id, name, hash) {\n    return {\n        type: 'SET_USER',\n        id,\n        name,\n        hash\n    }\n}","export function setLoading (visible) {\n    return {\n        type: 'SET_LOADING',\n        visible,\n    }\n}","export function setToast (visible, style, message) {\n    return {\n        type: 'SET_TOAST',\n        visible,\n        style,\n        message\n    }\n}","import axios from 'axios';\n\nconst userUrl = String(window.location.href).slice(0, 14);\n\nvar baseURL = '';\nif (userUrl === 'http://192.168')\n  baseURL = 'http://192.168.1.1:3333'\nelse if (userUrl === 'http://localho')\n  baseURL = 'http://localhost:3333'\nelse\n  baseURL = 'http://177.36.223.44:3333';\n\nconsole.log(userUrl, baseURL);\n\nconst api = axios.create({\n  baseURL: baseURL,\n})\n\nexport default api;","import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport './style.css';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as userActions from '../../store/actions/user';\nimport * as toastActions from '../../store/actions/toast';\nimport api from '../../services/api';\nimport imgLogin from '../../assets/login.png';\n\nfunction Login(props) {\n    const history = useHistory();\n    \n    const [username, setUsername] = useState();\n    const [password, setPassword] = useState();\n\n    const handleLogin = async e => {\n        e.preventDefault();\n        props.dispatch(loadingActions.setLoading(true));\n        const res = await api.post('users/login', {\n            username: username,\n            password: password\n        });\n        if (!res.data)\n        props.dispatch(toastActions.setToast(true, 'success', 'Usuario ou senha incorretos.'));\n        else {\n            console.log(res.data)\n\n            props.dispatch(userActions.setUser(res.data.id, res.data.name, res.data.hash));\n            localStorage.setItem('@sg/user/id', res.data.id);\n            localStorage.setItem('@sg/user/name', res.data.name);\n            localStorage.setItem('@sg/user/hash', res.data.hash);\n            history.push('dashboard');\n        }\n\n            props.dispatch(loadingActions.setLoading(false));\n    }\n\n    return (\n        <div className=\"login-container\">\n            <form onSubmit={handleLogin}>\n                <img src={imgLogin} alt=\"Login\" />\n                <label htmlFor=\"fname\">Usuario</label>\n                <input\n                    type=\"text\"\n                    value={username}\n                    onChange={e => setUsername(e.target.value)} />\n                <label htmlFor=\"lname\">Senha</label>\n                <input\n                    type=\"password\"\n                    value={password}\n                    onChange={e => setPassword(e.target.value)} />\n\n                <button type=\"submit\"> Login </button>\n\n            </form>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Login);","import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport './style.css';\nimport * as userActions from '../../store/actions/user';\n\nfunction AppBar(props) {\n    const history = useHistory();\n\n    return (\n        <Navbar expand=\"lg\" className=\"navbar\" >\n            <Navbar.Brand id=\"basic-nav-dropdown\" onClick={() => history.push('dashboard')}>Dashboard</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <NavDropdown title=\"Cadastro\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item id=\"color-item\" onClick={() => history.push('attendance')} > Atendimentos </NavDropdown.Item>\n                        <NavDropdown.Item id=\"color-item\" onClick={() => history.push('client')} > Devedores </NavDropdown.Item>\n                        <NavDropdown.Item id=\"color-item\" onClick={() => history.push('collect')} > Débitos </NavDropdown.Item>\n                        <NavDropdown.Item id=\"color-item\" onClick={() => history.push('companie')} > Credores </NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Importação\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item onClick={() => history.push('import-collects')}>Importar Cobranças</NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Boletos\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item onClick={() => history.push('billet')}>Boletos</NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Controle de Usuários\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item onClick={() => history.push('user')}>Cadastro de Usuário </NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n                <Navbar.Collapse className=\"justify-content-end\">\n                    <Navbar.Text style={{ color:'#fff' }}> {'Usuário Atual: ' + props.state.user.name} </Navbar.Text>\n                    <Navbar.Text>\n                        <Nav.Link id=\"basic-nav-dropdown\" onClick={() => {\n                            props.dispatch(userActions.setUser(0, ''));\n                            localStorage.setItem('@sg/user/name', '')\n                            localStorage.setItem('@sg/user/id', 0)\n                            history.push('/')\n                        }}>Sair</Nav.Link>\n                    </Navbar.Text>\n                </Navbar.Collapse>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default connect(state => ({ state }))(AppBar);","import React, { useEffect, useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { Doughnut } from 'react-chartjs-2';\n\nimport './style.css';\nimport api from '../../services/api';\nimport { getRandomColor } from '../../helpers/general';\nimport CurrencyInput from 'react-currency-input-field';\nimport AppBar from '../../components/AppBar';\n\nfunction Dashboard(props) {\n    const history = useHistory();\n    const header = { headers: { hash: props.state.user.hash } };\n    const [attendanceDataChart, setAttendanceDataChart] = useState({});\n    const [attendanceMonthTotal, setAttendanceMonthTotal] = useState(0)\n\n\n    const getDataAttendancesChart = async () => {\n        const res = await api.get('attendances/chart-actual-month', header);\n        var negotiatedValues = [];\n        var dataValues = [];\n        var colorsValues = [];\n        var attendanceMonthTotal = 0;\n\n        res.data.map(values => {\n            negotiatedValues.push(values.negotiated_value)\n            dataValues.push(values.date)\n            colorsValues.push(getRandomColor())\n            attendanceMonthTotal = attendanceMonthTotal + values.negotiated_value\n        });\n\n        setAttendanceMonthTotal(attendanceMonthTotal);\n\n        setAttendanceDataChart({\n            labels: dataValues,\n            datasets: [{\n                data: negotiatedValues,\n                backgroundColor: colorsValues,\n                hoverBackgroundColor: colorsValues\n            }]\n        });\n    }\n\n\n    useEffect(() => {\n        getDataAttendancesChart()\n    }, [])\n\n\n    return (\n        <div className=\"dashboard-container\">\n            <AppBar />\n            <div style={{textAlign: \"center\", margin: \"auto\", marginTop: '5%', width: '90%', maxWidth: 800}}>\n                <h5 style={{ textAlign: \"center\" }}> Atendimentos Liquidados do mês vigente </h5>\n                <Doughnut data={attendanceDataChart} />\n                <CurrencyInput\n                    style={{ width: 200, backgroundColor: '#fff', border: 'none', textAlign: \"center\", fontWeight: 'bold' }}\n                    prefix=\"R$ \"\n                    placeholder=\"Multa\"\n                    decimalSeparator=\",\"\n                    groupSeparator=\".\"\n                    value={attendanceMonthTotal ? attendanceMonthTotal : ''}\n                    readOnly />\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Dashboard);","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport CurrencyFormat from 'react-currency-format';\nimport CurrencyInput from 'react-currency-input-field';\nimport Downshift from 'downshift';\nimport moment from 'moment';\n\nimport './style.css';\nimport api from '../../services/api';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport * as callbackActions from '../../store/actions/callback';\nimport AppBar from '../../components/AppBar';\nimport { strValueToFloat, floatValueToStr } from '../../helpers/myFormat';\n\n\nfunction Client(props) {\n    const history = useHistory();\n    const header = { headers: { hash: props.state.user.hash } };\n\n    const [show, setShow] = useState(false);\n    const [registers, setRegisters] = useState([]);\n    const [isClosed, setIsClosed] = useState(false);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [searchField, setSearchField] = useState('');\n    const [search, setSearch] = useState([]);\n    const [selectFilterField, setSelectFilterField] = useState('client_name')\n\n    //FIELDS\n    const [client, setClient] = useState('');\n    const [clientName, setClientName] = useState('');\n    const [clients, setClients] = useState([]);\n\n    const [status, setStatus] = useState('Aberto');\n    const [companie, setCompanie] = useState('');\n    const [companieName, setCompanieName] = useState('');\n    const [companies, setCompanies] = useState([]);\n    const [account, setAccount] = useState('');\n    const [document, setDocument] = useState('');\n    const [dtMaturity, setDtMaturity] = useState('');\n    const [days, setDays] = useState('');\n    const [value, setValue] = useState('');\n    const [updatedDebt, setUpdatedDebt] = useState('');\n    const [defaultHonorary, setDefaultHonorary] = useState('');\n    const [defaultInterest, setDefaultInterest] = useState('');\n    const [interestCalculed, setInterestCalculed] = useState('');\n    const [maximumDiscount, setMaximumDiscount] = useState('');\n    const [negotiatedValue, setNegotiatedValue] = useState('');\n    const [defaultPenalty, setDefaultPenalty] = useState('');\n    const [penaltyCalculed, setPenaltyCalculed] = useState('');\n    const [honoraryCalculed, setHonoraryCalculed] = useState('');\n    const [honoraryPer, setHonoraryPer] = useState('');\n    const [obs, setObs] = useState('');\n\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('collects', header)\n            await setRegisters(res.data);\n            await setSearch(res.data);\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    const handleSubmit = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        calculate();\n\n        //VALIDAÇÕES\n        if (!client) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n\n        //CRIA OBJETO PARAR CADASTRAR/ALTERAR\n        const regTemp = {\n            client,\n            status,\n            document,\n            dt_maturity: dtMaturity,\n            value,\n            account,\n            days,\n            companie,\n            updated_debt: updatedDebt,\n            maximum_discount: maximumDiscount,\n            negotiated_value: negotiatedValue,\n            honorary_per: honoraryPer,\n            obs: obs\n        }\n        setRegister(regTemp);\n\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`collects/${register.id}`, regTemp, header)\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //CADASTRO\n                const res = await api.post('collects', regTemp, header);\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(loadingActions.setLoading(false));\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`collects/${register.id}`, header);\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            setShow(false);\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        if (selectFilterField === 'id')\n            tempSearch = await registers.filter(find =>\n                String(find.id).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        else if (selectFilterField === 'client_name')\n            tempSearch = registers.filter(find =>\n                String(find.client_name).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        else if (selectFilterField === 'client_document')\n            tempSearch = registers.filter(find =>\n                String(find.client_document).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        else if (selectFilterField === 'client_phones')\n            tempSearch = registers.filter(find =>\n                String(find.client_phone + find.client_cellphone).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n\n        setSearch(tempSearch)\n    }\n\n    const setUpdating = async (reg) => {\n        setRegister(reg);\n        setClient(reg.client);\n        setClientName(reg.client_name);\n        setStatus(reg.status);\n        setDays(reg.days);\n        setCompanie(reg.companie)\n        setCompanieName(reg.companie_name)\n        setUpdatedDebt(reg.updated_debt)\n        setDocument(reg.document)\n        setDefaultInterest(reg.default_interest)\n        setDefaultHonorary(reg.default_honorary)\n        setAccount(reg.account)\n        setDtMaturity(reg.dt_maturity)\n        setMaximumDiscount(reg.maximum_discount)\n        setNegotiatedValue(reg.negotiated_value)\n        setHonoraryPer(reg.default_honorary);\n        setDefaultPenalty(reg.default_penalty)\n        setValue(reg.value);\n        setObs(reg.obs);\n\n        const res = await api.get(`companies/find-by-id/${reg.companie}`, header)\n        if (res.data) {\n            setCompanieName(res.data.name)\n            setDefaultInterest(res.data.default_interest)\n            setHonoraryPer(res.data.default_honorary)\n            setDefaultPenalty(res.data.default_penalty)\n        }\n\n        setIsUpdating(true);\n        setShow(true)\n    }\n\n    const clearValues = () => {\n        setClient('')\n        setClientName('')\n        setStatus('Aberto')\n        setDocument('');\n        setDtMaturity('');\n        setAccount('');\n        setCompanie('')\n        setCompanieName('')\n        setUpdatedDebt('')\n        setDefaultHonorary('')\n        setDefaultInterest('')\n        setMaximumDiscount('')\n        setNegotiatedValue('')\n        setHonoraryPer('');\n        setObs('')\n        setDays('');\n        setValue('');\n        setDefaultPenalty('')\n        loadRegisters();\n    }\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n    const calculate = async () => {\n        if (!moment(dtMaturity, \"DD/MM/YYYY\")._isValid)\n            setDays(0)\n\n        const calculedDays = await moment(dtMaturity, \"DD/MM/YYYY\").diff(moment(), 'days')\n\n        if (calculedDays > -1)\n            setDays(0)\n\n        //DAYS\n        setDays(calculedDays * -1)\n\n        //INTEREST (JUROS)\n        const interest = await parseFloat((((strValueToFloat(defaultInterest) / 100) * strValueToFloat(value)) * strValueToFloat(days))).toFixed(2);\n        setInterestCalculed(floatValueToStr(interest))\n\n        //PENALTY (MULTA)\n        const penalty = await parseFloat(((strValueToFloat(defaultPenalty) / 100) * strValueToFloat(value))).toFixed(2);\n        setPenaltyCalculed(floatValueToStr(penalty))\n\n        //HONORARY (HONORÁRIOS)\n        const honorary = await parseFloat(((strValueToFloat(value) + strValueToFloat(penaltyCalculed) + strValueToFloat(interestCalculed)) * (strValueToFloat(honoraryPer) / 100))).toFixed(2);\n        setHonoraryCalculed(floatValueToStr(honorary))\n\n        const debit = await parseFloat(((strValueToFloat(interestCalculed) + strValueToFloat(penaltyCalculed) + strValueToFloat(honoraryCalculed) + strValueToFloat(value)))).toFixed(2);\n        setUpdatedDebt(floatValueToStr(debit))\n    }\n\n    const updateAllDebits = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('collects/recalc', header);\n            await loadRegisters();\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Todos os débitos foram atualizados.'));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n\n    return (\n        <div className=\"collect-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <select\n                    className=\"select-search\"\n                    onChange={e => setSelectFilterField(e.target.value)}>\n                    <option value=\"id\">Código</option>\n                    <option value=\"client_name\" selected> Nome do cliente</option>\n                    <option value=\"client_document\" > Documento do cliente</option>\n                    <option value=\"client_phones\" > Telefone do cliente</option>\n                </select>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n                <button onClick={updateAllDebits}> Atualizar todos os débitos </button>\n            </div>\n\n            <MDBTable responsive hover bordered>\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Cliente</th>\n                        <th>Status</th>\n                        <th>Dt. Venc. </th>\n                        <th>Vlr. Originário </th>\n                        <th>Dias em Atraso</th>\n                        <th>Débito Atualizado</th>\n                        <th>Credor</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr\n                            style={{ cursor: 'pointer' }}\n                            onClick={async () => { await setUpdating(reg) }}\n                            key={reg.id}>\n                            <td>{reg.id}</td>\n                            <td>{reg.client + ' - ' + reg.client_name}</td>\n                            <td>{reg.status}</td>\n                            <td>{reg.dt_maturity}</td>\n                            <td>{'R$ ' + reg.value ? strValueToFloat(reg.value).toLocaleString() : 0}</td>\n                            <td>{reg.days}</td>\n                            <td>{'R$ ' + reg.updated_debt ? strValueToFloat(reg.updated_debt).toLocaleString() : 0}</td>\n                            <td>{reg.companie + ' - ' + reg.companie_name}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title>Cadastro de Débito</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        register.id ?\n                            <div>\n                                <label> Código </label>\n                                <label> {': ' + register.id} </label>\n                                <br />\n                            </div>\n                            : ''\n                    }\n                    <br />\n\n                    <label> Credor </label>\n                    <Downshift inputValue={companieName} onChange={selection => {\n                        setCompanies([])\n                        setCompanie(selection.id)\n                        setCompanieName(selection.name)\n                        setDefaultInterest(selection.default_interest)\n                        setHonoraryPer(selection.default_honorary)\n                        setDefaultPenalty(selection.default_penalty)\n                    }}\n                        itemToString={item => (item ? item.name : '')}>\n                        {({ getInputProps, getItemProps, getMenuProps, isOpen, inputValue, getRootProps }) => (\n                            <div>\n                                <div {...getRootProps({}, { suppressRefError: true })} className=\"inline\">\n                                    <input value={companie} type=\"number\" readOnly style={{ width: 80, marginRight: 5 }} />\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Pesquisa\"\n                                        value={companieName}\n                                        onChangeCapture={async e => {\n                                            setCompanieName(e.target.value)\n                                            if (!e.target.value || e.target.value.length < 3) return;\n                                            const { data } = await api.get(`companies/find-by-name/${String(e.target.value).normalize(\"NFD\")}`, header);\n                                            setCompanies(data);\n                                        }}\n                                        {...getInputProps()} />\n                                </div>\n                                <ul {...getMenuProps({})}>\n                                    {isOpen ? companies\n                                        .filter(item => !inputValue || item.name.toLowerCase().includes(inputValue.toLowerCase()))\n                                        .map((item) => (\n                                            <li\n                                                className=\"search-field-results\"\n                                                {...getItemProps({ key: item.id, item })}>\n                                                {`${item.id} - ${item.name}`}\n                                            </li>))\n                                        : null}\n                                </ul>\n                            </div>\n                        )}\n                    </Downshift>\n\n\n                    <label> Devedor </label>\n                    <Downshift inputValue={clientName} onChange={selection => {\n                        setClient(selection.id)\n                        setClientName(selection.name)\n                        setClients([])\n                    }}\n                        itemToString={item => (item ? item.name : '')}>\n                        {({ getInputProps, getItemProps, getMenuProps, isOpen, inputValue, getRootProps }) => (\n                            <div>\n                                <div {...getRootProps({}, { suppressRefError: true })} className=\"inline\">\n                                    <input value={client} type=\"number\" readOnly style={{ width: 80, marginRight: 5 }} />\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Pesquisa\"\n                                        value={clientName}\n                                        onChangeCapture={async e => {\n                                            setClientName(e.target.value)\n                                            if (!e.target.value || e.target.value.length < 3) return;\n                                            const { data } = await api.get(`clients/find-by-name/${String(e.target.value).normalize(\"NFD\")}`, header);\n                                            setClients(data);\n                                        }}\n                                        {...getInputProps()} />\n                                </div>\n                                <ul {...getMenuProps({})}>\n                                    {isOpen ? clients\n                                        .filter(item => !inputValue || item.name.toLowerCase().includes(inputValue.toLowerCase()))\n                                        .map((item) => (\n                                            <li\n                                                className=\"search-field-results\"\n                                                {...getItemProps({ key: item.id, item })}>\n                                                {`${item.id} - ${item.name}`}\n                                            </li>))\n                                        : null}\n                                </ul>\n                            </div>\n                        )}\n                    </Downshift>\n\n                    <div className=\"inline\">\n                        <div style={{ marginRight: 10 }}>\n                            <label> Dt. Vencimento </label>\n                            <CurrencyFormat\n                                format=\"##/##/####\"\n                                placeholder=\"Data de vencimento\"\n                                value={dtMaturity ? dtMaturity : ''}\n                                onValueChange={e => setDtMaturity(e.formattedValue)}\n                                onBlur={calculate} />\n                        </div>\n                        <div>\n                            <label> Dias em atraso </label>\n                            <input\n                                type=\"number\"\n                                placeholder=\"Dias\"\n                                value={days}\n                                readOnly />\n                        </div>\n                    </div>\n\n                    <label> Status </label>\n                    <select\n                        className=\"select-search\"\n                        onChange={e => setStatus(e.target.value)}>\n                        <option value=\"Aberto\" selected={status === 'Aberto' ? true : false}>Aberto</option>\n                        <option value=\"Negociado\" selected={status === 'Negociado' ? true : false}>Negociado</option>\n                        <option value=\"Liquidado\" selected={status === 'Liquidado' ? true : false}>Liquidado</option>\n                    </select>\n\n                    <label> Nota fiscal </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Nota fiscal\"\n                        value={document}\n                        onChange={e => setDocument(e.target.value)}\n                        onBlur={calculate} />\n\n                    <label> Modalidade de Faturamento </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Conta\"\n                        value={account}\n                        onChange={e => setAccount(e.target.value)}\n                        onBlur={calculate} />\n\n\n                    <label> R$ Valor Originário </label>\n                    <CurrencyInput\n                        prefix=\"R$ \"\n                        placeholder=\"Valor Originário\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={value ? value : ''}\n                        onChange={e => setValue(e)}\n                        onBlur={calculate} />\n\n                    <label> R$ Multa </label>\n                    <CurrencyInput\n                        prefix=\"R$ \"\n                        placeholder=\"Multa\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={penaltyCalculed ? penaltyCalculed : ''}\n                        onChange={e => setPenaltyCalculed(e)}\n                        readOnly />\n\n                    <label> R$ Juros </label>\n                    <CurrencyInput\n                        prefix=\"R$ \"\n                        placeholder=\"Juros\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={interestCalculed ? interestCalculed : ''}\n                        onChange={e => setInterestCalculed(e)}\n                        readOnly />\n\n                    <div className=\"inline\">\n                        <div style={{ width: 200, marginRight: 5 }}>\n                            <label> % Honorários </label>\n                            <CurrencyInput\n                                prefix=\"% \"\n                                placeholder=\"Honorários\"\n                                decimalSeparator=\",\"\n                                groupSeparator=\".\"\n                                value={honoraryPer ? honoraryPer : ''}\n                                onChange={e => setHonoraryPer(e)}\n                                onBlur={calculate} />\n                        </div>\n                        <div>\n\n                            <label> R$ Honorários </label>\n                            <CurrencyInput\n                                prefix=\"R$ \"\n                                placeholder=\"Honorários \"\n                                decimalSeparator=\",\"\n                                groupSeparator=\".\"\n                                value={honoraryCalculed ? honoraryCalculed : ''}\n                                onChange={e => setHonoraryCalculed(e)}\n                                readOnly />\n                        </div>\n\n                    </div>\n\n                    <label> R$ Débito Atualizado </label>\n                    <div className=\"inline\">\n                        <CurrencyInput\n                            prefix=\"R$ \"\n                            placeholder=\"Débito Atualizado\"\n                            decimalSeparator=\",\"\n                            groupSeparator=\".\"\n                            value={updatedDebt ? updatedDebt : ''}\n                            onChange={e => setUpdatedDebt(e)}\n                            readOnly />\n                        <button\n                            disabled={status === 'Liquidado'}\n                            style={{ marginLeft: 5, width: 'auto' }}\n                            onClick={calculate}> Atualizar </button>\n\n                    </div>\n\n                    <label> R$ Desconto Máximo </label>\n                    <CurrencyInput\n                        prefix=\"R$ \"\n                        placeholder=\"Desconto Máximo\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={maximumDiscount ? maximumDiscount : ''}\n                        onChange={e => setMaximumDiscount(e)} />\n\n                    <label> R$ Valor Negociado </label>\n                    <CurrencyInput\n                        prefix=\"R$ \"\n                        placeholder=\"Valor Negociado\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={negotiatedValue}\n                        onChange={e => setNegotiatedValue(e)}\n                        readOnly\n                        onBlur={() => {\n                            if (parseFloat(negotiatedValue ? negotiatedValue : '0') < parseFloat(maximumDiscount ? maximumDiscount : '0')) {\n                                setNegotiatedValue('')\n                            }\n                        }} />\n\n                    <label> Observação </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Observações\"\n                        value={obs}\n                        onChange={e => setObs(e.target.value)} />\n\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={() => setShow(false)} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n            <div className=\"fab-container\">\n                <button onClick={() => setNew()}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Client);","import React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport * as XLSX from 'xlsx';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport { connect } from 'react-redux';\nimport moment, { now } from 'moment';\nimport './style.css';\nimport api from '../../services/api';\nimport { strValueToFloat, floatValueToStr, configSheetStr } from '../../helpers/myFormat';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport AppBar from '../../components/AppBar';\n\nfunction ImportCollects(props) {\n    const history = useHistory();\n    const header = { headers: { hash: props.state.user.hash }};\n\n    const sheetFile = useRef()\n    const [importedArray, setImportedArray] = useState([])\n    const [companies, setCompanies] = useState([]);\n    const [companieId, setCompanieId] = useState(0);\n\n\n    useEffect(() => {\n        loadCompanies();\n    }, []);\n\n    const loadCompanies = async () => {\n        const res = await api.get('companies', header, header);\n        if (res.data.length > 0) {\n            setCompanies(res.data);\n            setCompanieId(res.data[0].id)\n        }\n    }\n\n    const configStrTelephone = tel => {\n        if (!tel)\n            return ''\n        var telFormated = tel + '';\n        telFormated = telFormated.toString();\n        telFormated = telFormated.replace(/[^\\d]+/g, '');\n        if (telFormated.substring(0, 2) !== '55')\n            telFormated = '55' + telFormated;\n        return telFormated;\n    }\n\n    const insetOne = async register => {\n        const data = {\n            status: 'Aberto',\n            companie: companieId,\n            client: register.NOME_CLIENTE,\n            cellphone: register.FONE_1 ? register.FONE_1 : register.FONE_2,\n            phone: register.FONE_2 ? register.FONE_2 : register.FONE_3,\n            dt_maturity: register.DT_VENC,\n            maximum_discount: register.DESC_MAX,\n            value: register.VLR_ORIGINARIO,\n        }\n        api.post('collects/import-collect', data, header);\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const registerOnBackend = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        \n        for (var reg of importedArray) {\n            await sleep(100).then(() => {\n                insetOne(reg)\n            });\n        }\n        props.dispatch(loadingActions.setLoading(false));\n\n        props.dispatch(toastActions.setToast(true, 'success', 'Todos os registros foram importados!'));\n    }\n\n    const readFile = async sheet => {\n        props.dispatch(loadingActions.setLoading(true));\n        var f = sheet.current.files[0]\n        var reader = await new FileReader();\n        await reader.readAsArrayBuffer(f);\n        reader.onload = async e => {\n            var data = await new Uint8Array(reader.result);\n            var wb = await XLSX.read(data, { type: \"array\" });\n            data = new Uint8Array(data);\n            var arr = [];\n            for (var i = 0; i !== data.length; ++i) {\n                arr[i] = String.fromCharCode(data[i]);\n            }\n            var bstr = arr.join(\"\");\n            var workbook = XLSX.read(bstr, { type: \"binary\" })\n            var first_sheet_name = workbook.SheetNames[0];\n            var worksheet = workbook.Sheets[first_sheet_name];\n            var xlsxJSON = await (XLSX.utils.sheet_to_json(worksheet, { raw: false }));\n            var tempArray = [];\n            for (var json of xlsxJSON) {\n                json.FONE_1 = await configStrTelephone(json.FONE_1);\n                json.FONE_2 = await configStrTelephone(json.FONE_1);\n                json.FONE_3 = await configStrTelephone(json.FONE_1);\n                json.DT_VENC = await moment(json.DT_VENC).format('DD/MM/YYYY')\n                json.VLR_ORIGINARIO = await configSheetStr(json.VLR_ORIGINARIO)\n                json.DESC_MAX = await configSheetStr(json.DESC_MAX)\n                tempArray.push(json);\n            }\n            setImportedArray(tempArray);\n            props.dispatch(loadingActions.setLoading(false));\n        }\n    }\n\n    return (\n        <div>\n            <AppBar />\n            <div className=\"import-collet-container\">\n                <div className=\"form\">\n                    <select\n                        onChange={(e) => setCompanieId(e.target.value)}\n                        className=\"select-client\">\n                        {companies.map(comp => (\n                            <option key={comp.id} value={comp.id}> {comp.name}</option>\n                        ))}\n                    </select>\n                    <label htmlFor={companieId > 0 ? \"file-upload\" : \"\"} className=\"custom-file-upload\">\n                        Carregar arquivo\n                    </label>\n                    <input id=\"file-upload\" type=\"file\" ref={sheetFile} onChange={() => readFile(sheetFile)} />\n                    <button\n                        disabled={(!importedArray.length > 0)}\n                        className=\"import-button\"\n                        onClick={registerOnBackend} >\n                        Importar\n                    </button>\n                </div>\n                <MDBTable responsive hover bordered>\n                    <MDBTableHead>\n                        <tr>\n                            <th>Cliente</th>\n                            <th>Telefone 1</th>\n                            <th>Telefone 2</th>\n                            <th>Telefone 3</th>\n                            <th>Dt. Venc.</th>\n                            <th>Vlr. Originário</th>\n                            <th>Desconto Max.</th>\n                        </tr>\n                    </MDBTableHead>\n                    <MDBTableBody>\n                        {importedArray.map(collect => (\n                            <tr key={collect.__rowNum__}>\n                                <td>{collect.NOME_CLIENTE}</td>\n                                <td>{collect.FONE_1}</td>\n                                <td>{collect.FONE_2}</td>\n                                <td>{collect.FONE_3}</td>\n                                <td>{collect.DT_VENC}</td>\n                                <td>{'R$ ' + collect.VLR_ORIGINARIO}</td>\n                                <td>{'R$ ' + collect.DESC_MAX}</td>\n                            </tr>\n                        ))}\n                    </MDBTableBody>\n                </MDBTable>\n            </div>\n        </div >\n    );\n}\n\nexport default connect(state => ({ state }))(ImportCollects);","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport CurrencyFormat from 'react-currency-format';\nimport CurrencyInput from 'react-currency-input-field';\nimport './style.css';\nimport myFormat from '../../helpers/myFormat';\nimport api from '../../services/api';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport AppBar from '../../components/AppBar';\n\n\nfunction Companie(props) {\n    const history = useHistory();\n    const header = { headers: { hash: props.state.user.hash }};\n    const [show, setShow] = useState(false);\n    const [search, setSearch] = useState([]);\n    const [searchField, setSearchField] = useState([]);\n    const [registers, setRegisters] = useState([]);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    const [name, setName] = useState('');\n    const [cnpj, setCnpj] = useState('');\n    const [edress, setEdress] = useState('');\n    const [phone, setPhone] = useState('');\n    const [responsibleStaff, setResponsibleStaff] = useState('');\n    const [dtContract, setDtContract] = useState('');\n    const [dtRenovation, setDtRenovation] = useState('');\n    const [defaultInterest, setDefaultInterest] = useState('');\n    const [defaultHonorary, setDefaultHonorary] = useState('');\n    const [defaultPenalty, setDefaultPenalty] = useState('');\n    const [monthlyValue, setMonthlyValue] = useState('');\n    const [payday, setPayDay] = useState('');\n    const [paymentType, setPaymentType] = useState('');\n    const [obs, setObs] = useState('');\n\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const handleSubmit = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n\n        //VALIDAÇÕES\n        if (!name) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n\n        //CRIA OBJETO PARAR CADASTRAR/ALTERAR\n        const regTemp = {\n            name,\n            cnpj,\n            edress,\n            phone,\n            responsible_staff: responsibleStaff,\n            dt_contract: dtContract,\n            dt_renovation: dtRenovation,\n            default_interest: defaultInterest,\n            default_honorary: defaultHonorary,\n            default_penalty: defaultPenalty,\n            monthly_value: monthlyValue,\n            payday: payday,\n            payment_type: paymentType,\n            obs,\n        }\n\n        setRegister(regTemp);\n\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`companies/${register.id}`, regTemp, header)\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //CADASTRO\n                const res = await api.post('companies', regTemp, header);\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`companies/${register.id}`, header);\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            loadRegisters();\n            setShow(false)\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('companies',header)\n            setRegisters(res.data);\n            setSearch(res.data)\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        tempSearch = registers.filter(find =>\n            find.name.toLowerCase().indexOf(String(searchField).toLowerCase()) > -1\n        )\n        setSearch(tempSearch)\n    }\n\n    const clearValues = () => {\n        setName('')\n    }\n\n\n    const setUpdating = (reg) => {\n        setIsUpdating(true);\n        setRegister(reg);\n        setName(reg.name);\n        setCnpj(reg.cnpj);\n        setEdress(reg.edress);\n        setPhone(reg.phone);\n        setResponsibleStaff(reg.responsible_staff);\n        setDtContract(reg.dt_contract);\n        setDtRenovation(reg.dt_renovation);\n        setDefaultInterest(reg.default_interest);\n        setDefaultHonorary(reg.default_honorary);\n        setDefaultPenalty(reg.default_penalty);\n        setMonthlyValue(reg.monthly_value);\n        setPayDay(reg.payday);\n        setPaymentType(reg.payment_type);\n\n        setObs(reg.obs);\n        setShow(true);\n    }\n\n    const hide = async (reg) => {\n        setShow(false);\n        setRegister({});\n        setName('');\n        setName('');\n        setCnpj('');\n        setEdress('');\n        setPhone('');\n        setResponsibleStaff('');\n        setDtContract('');\n        setDtRenovation('');\n        setDefaultInterest('');\n        setDefaultHonorary('');\n        setDefaultPenalty('');\n        setMonthlyValue('');\n        setPayDay('');\n        setPaymentType('');\n        setObs('');\n        setIsUpdating(false);\n    }\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n    return (\n        <div className=\"companie-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <label> Nome: </label>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n            </div>\n\n            <MDBTable responsive hover bordered className=\"table\">\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Razão Social</th>\n                        <th>Observação</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => setUpdating(reg)}\n                            key={reg.id}>\n                            <td>{reg.id}</td>\n                            <td>{reg.name}</td>\n                            <td>{reg.obs}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title>Cadastro de Credor</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        register.id ?\n                            <div>\n                                <label> Código </label>\n                                <label> {': ' + register.id} </label>\n                                <br />\n                            </div>\n                            : ''\n                    }\n                    <label> Razão Social </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Razão Social\"\n                        value={name}\n                        onChange={e => setName(e.target.value)} />\n\n                    <label> CNPJ </label>\n                    <CurrencyFormat\n                        format=\"##.###.###/####-##\"\n                        placeholder=\"CNPJ\"\n                        value={cnpj ? cnpj : ''}\n                        onValueChange={e => setCnpj(e.value)} />\n\n                    <label> Endereço </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Endereço\"\n                        value={edress}\n                        onChange={e => setEdress(e.target.value)} />\n\n                    <label> Telefone </label>\n                    <CurrencyFormat\n                        format=\"## (##) #########\"\n                        placeholder=\"Telefone\"\n                        value={phone ? phone : ''}\n                        onValueChange={e => setPhone(e.value)} />\n\n                    <label> Pessoa Responsável </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Pessoa Responsável\"\n                        value={responsibleStaff}\n                        onChange={e => setResponsibleStaff(e.target.value)} />\n\n\n                    <label> Data de início de contrato </label>\n                    <CurrencyFormat\n                        format=\"##/##/####\"\n                        placeholder=\"Data do contrato\"\n                        value={dtContract ? dtContract : ''}\n                        onValueChange={e => setDtContract(e.value)} />\n\n                    <label> Prazo para renovação </label>\n                    <CurrencyFormat\n                        format=\"##/##/####\"\n                        placeholder=\"Data de renovação\"\n                        value={dtRenovation ? dtRenovation : ''}\n                        onValueChange={e => setDtRenovation(e.value)} />\n\n                    <label> R$ Valor da Mensalidade </label>\n                    <CurrencyInput\n                        placeholder=\"Valor da Mensalidade\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={monthlyValue?monthlyValue:''}\n                        onChange={e => setMonthlyValue(e)}/>\n\n                    <label> % Juros Diário </label>\n                    <CurrencyInput\n                        placeholder=\"Juros \"\n                        decimalsLimit={3}\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={defaultInterest?defaultInterest:''}\n                        onChange={e => setDefaultInterest(e)}/>\n\n                    <label> % Honorários padrão </label>\n                    <CurrencyInput\n                        placeholder=\"Honorários Padrão\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={defaultHonorary?defaultHonorary:''}\n                        onChange={e => setDefaultHonorary(e)}/>\n\n                    <label> % Multa </label>\n                    <CurrencyInput\n                        placeholder=\"Honorários Padrão\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={defaultPenalty?defaultPenalty:''}\n                        onChange={e => setDefaultPenalty(e)}/>\n\n                    <label> Data de Pagamento </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Data de Pagamento\"\n                        value={payday}\n                        onChange={e => setPayDay(e.target.value)} />\n\n                    <label> Modalidade de Pagamento </label>\n                    <select\n                        className=\"select-search\"\n                        onChange={e => setPaymentType(e.target.value)}>\n                        <option value=\"Permuta\" selected={paymentType === 'Permuta' ? true : false}>Permuta</option>\n                        <option value=\"Sem mensalidade\" selected={paymentType === 'Sem mensalidade' ? true : false}>Sem mensalidade</option>\n                        <option value=\"Dinheiro\" selected={paymentType === 'Dinheiro' ? true : false}>Dinheiro</option>\n                    </select>\n\n                    <label> Obs </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Observação\"\n                        value={obs}\n                        onChange={e => setObs(e.target.value)} />\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={() => setShow(false)} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n\n            <div className=\"fab-container\">\n                <button onClick={setNew}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Companie);","import React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal, Tabs, Tab, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport moment from 'moment';\nimport CurrencyFormat from 'react-currency-format';\nimport CurrencyInput from 'react-currency-input-field';\nimport Downshift from 'downshift'\nimport './style.css';\nimport { floatValueToStr, strValueToFloat } from '../../helpers/myFormat';\nimport api from '../../services/api';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport * as callbackActions from '../../store/actions/callback';\nimport AppBar from '../../components/AppBar';\n\n\nfunction Attendance(props) {\n    const history = useHistory();\n    const header = { headers: { hash: props.state.user.hash }};\n    const [grandMaximumDiscount, setGrandMaximumDiscount] = useState(0);\n\n    const [show, setShow] = useState(false);\n    const [search, setSearch] = useState([]);\n    const [searchField, setSearchField] = useState([]);\n    const [registers, setRegisters] = useState([]);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    //ATTEDANCE FIELDS\n    const [clients, setClients] = useState([]);\n    const [aClient, setAClient] = useState('');\n    const [aClientName, setAClientName] = useState('');\n    const [aUser, setAUser] = useState(localStorage.getItem('@sg/user/id'));\n    const [aUserName, setAUserName] = useState(localStorage.getItem('@sg/user/name'));\n    const [aDtBegin, setADtBegin] = useState('');\n    const [aDtEnd, setADtEnd] = useState('');\n    const [aDescription, setADescription] = useState('');\n    const [aStatus, setAStatus] = useState('Não Negociado')\n    const [aNegotiatedValue, setANegotiatedValue] = useState('');\n    const [aGrandValue, setAGrandValue] = useState('');\n    const [aObs, setAObs] = useState('');\n\n\n    //CLIENT FIELDS\n    const [cliClient, setCliClient] = useState({});\n    const [cliId, setCliId] = useState('');\n    const [cliCode, setCliCode] = useState('');\n    const [cliPhoneAdditional, setCliPhoneAdditional] = useState('');\n    const [cliEmailAdditional, setCliEmailAdditional] = useState('');\n    const [cliEdressAdditional, setCliEdressAdditional] = useState('');\n    const [cliName, setCliName] = useState('');\n    const [cliCellphone, setCliCellphone] = useState('');\n    const [cliPhone, setCliPhone] = useState('');\n    const [cliCompanie, setCliCompanie] = useState('');\n    const [cliCompanieName, setCliCompanieName] = useState('');\n    const [cliEmail, setCliEmail] = useState('');\n    const [cliAttendance, setCliAttendance] = useState('');\n    const [cliDocumentType, setCliDocumentType] = useState('CPF');\n    const [cliDocument, setCliDocument] = useState('');\n    const [cliEdress, setCliEdress] = useState('');\n    const [cliObs, setCliObs] = useState('');\n\n    //COLLECTS FIELDS\n    const [cCollect, setCCollect] = useState({});\n    const [cCollects, setCCollects] = useState([]);\n    const [dataSource, setDataSource] = useState([]);\n    const [cCode, setCCode] = useState('');\n    const [cClient, setCClient] = useState('');\n    const [cClientName, setCClientName] = useState('');\n    const [cStatus, setCStatus] = useState('Aberto');\n    const [cCompanie, setCCompanie] = useState('');\n    const [cCompanieName, setCCompanieName] = useState('');\n    const [cAccount, setCAccount] = useState('');\n    const [cDocument, setCDocument] = useState('');\n    const [cDtMaturity, setCDtMaturity] = useState('');\n    const [cDays, setCDays] = useState(0);\n    const [cValue, setCValue] = useState(0);\n    const [cAmount, setCAmount] = useState(0);\n    const [cPenalty, setCPenalty] = useState(0);\n    const [cInterest, setCInterest] = useState(0);\n    const [cUpdatedDebt, setCUpdatedDebt] = useState(0);\n    const [cHonorary, setCHonorary] = useState(0);\n    const [cMaximumDiscount, setCMaximumDiscount] = useState(0);\n    const [cNegotiatedValue, setCNegotiatedValue] = useState(0);\n    const [cObs, setCObs] = useState('');\n\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const handleSubmit = async () => {\n\n        props.dispatch(loadingActions.setLoading(true));\n\n        setADtEnd(moment().format('L LT'))\n        const regTemp = {\n            client: aClient,\n            dt_begin: aDtBegin,\n            dt_end: moment().format('L LT'),\n            user: aUser,\n            description: aDescription,\n            negotiated_value: aNegotiatedValue,\n            grand_value: aGrandValue,\n            status: aStatus,\n            obs: aObs\n        }\n        setRegister(regTemp);\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`attendances/${register.id}`, regTemp, header)\n                await updateClient();\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                setIsUpdating(false);\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //VALIDAÇÕES\n                if (aObs.length < 10) {\n                    props.dispatch(loadingActions.setLoading(false));\n                    props.dispatch(toastActions.setToast(true, 'success', 'O campo OBSERVAÇÃO é obrigatório.'));\n                    return\n                }\n\n                if (aStatus === 'Negociado') {\n\n                    if (grandMaximumDiscount === 0) {\n                        if (strValueToFloat(aNegotiatedValue) < aGrandValue) {\n                            props.dispatch(loadingActions.setLoading(false));\n                            props.dispatch(toastActions.setToast(true, 'success', 'O VALOR NEGOCIADO deve ser o mesmo que o DÉBITO TOTAL!'));\n                            return 0\n                        }\n                    } else {\n                        if (strValueToFloat(aNegotiatedValue) < grandMaximumDiscount) {\n                            props.dispatch(loadingActions.setLoading(false));\n                            props.dispatch(toastActions.setToast(true, 'success', 'O VALOR NEGOCIADO não pode ser menor que o DESCONTO MÁXIMO!'));\n                            return 0\n                        }\n                    }\n                } else {\n                    setANegotiatedValue('0')\n                }\n\n                //CADASTRO\n                const res = await api.post('attendances', regTemp, header);\n\n                if (aStatus === 'Negociado')\n                    await closeCollectsByClient(aClient, res.data[0]);\n\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                setIsUpdating(false);\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`attendances/${register.id}`, header);\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            loadRegisters();\n            setShow(false)\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('attendances', header);\n            setRegisters(res.data);\n            setSearch(res.data)\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n            props.dispatch(loadingActions.setLoading(false));\n        }\n    }\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        tempSearch = registers.filter(find =>\n            find.client.toLowerCase().indexOf(String(searchField).toLowerCase()) > -1\n        )\n        setSearch(tempSearch)\n    }\n\n\n    const getCollectsByAttendanceId = async attendanceId => {\n        try {\n            const res = await api.get('/collects/find-by-attendance/' + attendanceId, header);\n            var tempGrandMaximumDiscount = 0;\n            var tempAGrandValue = 0;\n            res.data.map(collect => {\n                tempGrandMaximumDiscount = tempGrandMaximumDiscount + strValueToFloat(collect.maximum_discount)\n                tempAGrandValue = tempAGrandValue + strValueToFloat(collect.updated_debt);\n            })\n            setGrandMaximumDiscount(tempGrandMaximumDiscount);\n            if (tempAGrandValue > 0)\n                setAGrandValue(floatValueToStr(tempAGrandValue));\n\n            setCCollects(res.data)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    const getCollectsByClientId = async cliId => {\n        try {\n            const res = await api.get('/collects/find-by-client/' + cliId, header);\n            var tempGrandMaximumDiscount = 0;\n            var tempAGrandValue = 0;\n            res.data.map(collect => {\n                tempGrandMaximumDiscount = tempGrandMaximumDiscount + strValueToFloat(collect.maximum_discount)\n                tempAGrandValue = tempAGrandValue + strValueToFloat(collect.updated_debt);\n            })\n            setGrandMaximumDiscount(tempGrandMaximumDiscount);\n            if (tempAGrandValue > 0)\n                setAGrandValue(floatValueToStr(tempAGrandValue));\n\n            setCCollects(res.data)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n\n    const clearValues = () => {\n        //CLEAR ATTENDENCE\n        setAClient('');\n        setAClientName('');\n        setAUser(localStorage.getItem('@sg/user/id'));\n        setAUserName(localStorage.getItem('@sg/user/name'))\n        setADescription('');\n        setAStatus('Não Negociado');\n        setADtBegin(moment().format('L LT'));\n        setADtEnd('');\n        setANegotiatedValue('');\n        setAGrandValue('');\n        setAObs('');\n\n        //CLEAR CLIENTE\n        setCliClient({});\n        setCliId('');\n        setCliName('');\n        setCliCompanie('');\n        setCliCompanieName('');\n        setCliCellphone('');\n        setCliPhoneAdditional('');\n        setCliPhone('');\n        setCliEmail('');\n        setCliEmailAdditional('');\n        setCliEdress('');\n        setCliAttendance('');\n        setCliEdressAdditional('');\n        setCliDocumentType('CPF')\n        setCliDocument('');\n        setCliObs('');\n    }\n\n    const setClientValues = async (client) => {\n        setCliClient(client);\n        setCliId(client.id);\n        setCliName(client.name);\n        setCliCompanie(client.companie);\n        setCliCompanieName(client.companie_name);\n        setCliCellphone(client.cellphone);\n        setCliPhoneAdditional(client.phone_additional);\n        setCliPhone(client.phone);\n        setCliEmail(client.email);\n        setCliEmailAdditional(client.email_additional);\n        setCliEdress(client.edress);\n        setCliAttendance(client.attendance);\n        setCliEdressAdditional(client.edress_additional);\n        setCliDocumentType(client.document_type ? client.document_type : 'CPF')\n        setCliDocument(client.document);\n        setCliObs(client.obs);\n        await getCollectsByClientId(client.id)\n    }\n\n\n    const setUpdating = async (reg) => {\n        setIsUpdating(true);\n        setRegister(reg);\n        setAClient(reg.client);\n        setAClientName(reg.client_name);\n        setAUser(reg.user);\n        setADescription(reg.description);\n        setAStatus(reg.status)\n        setAObs(reg.obs);\n        setADtBegin(reg.dt_begin);\n        setANegotiatedValue(reg.negotiated_value)\n        setAGrandValue(reg.grand_value)\n        setADtEnd(reg.dt_end);\n\n        //LOAD CLIENT\n        if (reg.client) {\n            const res = await api.get(`clients/find-by-id/${reg.client}`, header);\n            setAClientName(res.data.name)\n            setClientValues(res.data)\n            // GET COLLECTS\n            await getCollectsByAttendanceId(reg.id)\n        }\n\n        setShow(true);\n    }\n\n\n    const hide = async (reg) => {\n        setShow(false);\n        setRegister({});\n        clearValues();\n        setIsUpdating(false);\n    }\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n\n    const updateClient = async () => {\n        try {\n            const regTemp = {\n                code: cliCode,\n                name: cliName,\n                cellphone: cliCellphone,\n                phone: cliPhone,\n                companie: cliCompanie,\n                edress_additional: cliEdressAdditional,\n                email_additional: cliEmailAdditional,\n                phone_additional: cliPhoneAdditional,\n                email: cliEmail,\n                edress: cliEdress,\n                document_type: cliDocumentType,\n                document: cliDocument,\n                obs: cliObs\n            }\n            const res = await api.put(`clients/${cliId}`, regTemp, header)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n\n\n    const closeCollectsByClient = async (clientId, attendanceId) => {\n        const res = await api.get(`collects/close-by-client/${clientId}/${attendanceId}`, header);\n    }\n\n    return (\n        <div className=\"attendance-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <label> Cliente: </label>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n            </div>\n\n            <MDBTable responsive hover bordered className=\"table\">\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Início</th>\n                        <th>Fim</th>\n                        <th>Usuário</th>\n                        <th>Cliente</th>\n                        <th>Valor Total</th>\n                        <th>Status</th>\n                        <th>Valor negociado</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr key={reg.id}\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => setUpdating(reg)}>\n                            <td>{reg.id}</td>\n                            <td>{reg.dt_begin}</td>\n                            <td>{reg.dt_end}</td>\n                            <td>{reg.user + ' - ' + reg.user_name}</td>\n                            <td>{reg.client + ' - ' + reg.client_name}</td>\n                            <td>{'R$ ' + strValueToFloat(reg.grand_value).toLocaleString()}</td>\n                            <td>{reg.status}</td>\n                            <td>{'R$ ' + strValueToFloat(reg.negotiated_value).toLocaleString()}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title> Atendimento </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Tabs defaultActiveKey=\"attendance\" id=\"uncontrolled-tab-example\">\n                        <Tab eventKey=\"attendance\" title=\"Atendimento\">\n                            {\n                                register.id ?\n                                    <div>\n                                        <br />\n                                        <label> Código </label>\n                                        <label> {': ' + register.id} </label>\n                                        <br />\n                                    </div>\n                                    : ''\n                            }\n                            <label> Usuário </label>\n                            <div className=\"inline\">\n                                <input\n                                    style={{ width: 80, marginRight: 5 }}\n                                    type=\"text\"\n                                    placeholder=\"Cód.\"\n                                    value={aUser}\n                                    readOnly />\n                                <input\n                                    type=\"text\"\n                                    readOnly\n                                    value={aUserName} />\n                                <br />\n                            </div>\n\n                            <label> Dt. Início </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Dt. Início\"\n                                readOnly\n                                value={aDtBegin} />\n                            <label> Dt. Fim </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Dt. Início\"\n                                readOnly\n                                value={aDtEnd} />\n\n                            <label> Observações </label>\n                            <textarea\n                                placeholder=\"Descreva como foi o atendimento\"\n                                onChange={e => setAObs(e.target.value)}>\n                                {aObs}\n                            </textarea>\n                        </Tab>\n\n                        <Tab eventKey=\"client\" title=\"Cliente\">\n                            <label> Devedor </label>\n                            <Downshift inputValue={aClientName} inputValue={aClientName} onChange={selection => {\n                                setAClient(selection.id)\n                                setAClientName(selection.name)\n                                setClientValues(selection)\n                            }}\n                                itemToString={item => (item ? item.name : '')}>\n                                {({ getInputProps, getItemProps, getMenuProps, isOpen, inputValue, getRootProps }) => (\n                                    <div>\n                                        <div {...getRootProps({}, { suppressRefError: true })} className=\"inline\">\n                                            <input value={aClient} type=\"number\" readOnly style={{ width: 80, marginRight: 5 }} />\n                                            <input\n                                                type=\"text\"\n                                                placeholder=\"Pesquisa\"\n                                                readOnly={isUpdating}\n                                                value={aClientName}\n                                                onChangeCapture={async e => {\n                                                    setAClientName(e.target.value)\n                                                    if (!e.target.value || e.target.value.length < 3) return;\n                                                    const { data } = await api.get(`clients/find-by-name/${e.target.value}`, header);\n                                                    setClients(data);\n                                                }}\n                                                {...getInputProps()} />\n                                        </div>\n                                        <ul {...getMenuProps({})}>\n                                            {isOpen ? clients\n                                                .filter(item => !inputValue || item.name.toLowerCase().includes(inputValue.toLowerCase()))\n                                                .map((item) => (\n                                                    <li\n                                                        className=\"search-field-results\"\n                                                        {...getItemProps({ key: item.id, item })}>\n                                                        {`${item.id} - ${item.name}`}\n                                                    </li>))\n                                                : null}\n                                        </ul>\n                                    </div>\n                                )}\n                            </Downshift>\n\n\n                            <label> Credor </label>\n                            <div className=\"inline\">\n                                <input\n                                    style={{ width: 80, marginRight: 5 }}\n                                    type=\"text\"\n                                    placeholder=\"Credor\"\n                                    value={cliCompanie}\n                                    readOnly />\n                                <input\n                                    type=\"text\"\n                                    readOnly\n                                    value={cliCompanieName} />\n                                <br />\n                            </div>\n\n                            <label> Código </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Código\"\n                                readOnly\n                                value={cliCode} />\n\n                            <label> Nome </label>\n                            <input\n                                type=\"text\"\n                                readOnly\n                                placeholder=\"Nome\"\n                                value={cliName} />\n\n                            <label> Celular </label>\n                            <CurrencyFormat\n                                format=\"## (##) #####-####\"\n                                placeholder=\"Celular\"\n                                readOnly\n                                value={cliCellphone ? cliCellphone : ''} />\n\n                            <label> Telefone </label>\n                            <CurrencyFormat\n                                format=\"## (##) #########\"\n                                placeholder=\"Telefone\"\n                                readOnly\n                                value={cliPhone ? cliPhone : ''} />\n\n                            <label> Telefone adicional </label>\n                            <CurrencyFormat\n                                format=\"## (##) #########\"\n                                placeholder=\"Telefone\"\n                                value={cliPhoneAdditional ? cliPhoneAdditional : ''}\n                                onValueChange={e => setCliPhoneAdditional(e.value)} />\n\n                            <label> Email </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Email\"\n                                readOnly\n                                value={cliEmail} />\n\n                            <label> Email adicional </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Email adicional\"\n                                value={cliEmailAdditional}\n                                onChange={e => setCliEmailAdditional(e.target.value)} />\n\n                            <div className=\"inline\">\n                                <div style={{ marginRight: 5 }}>\n                                    <label> Tipo de Cliente </label>\n                                    <select\n                                        className=\"select-search\"\n                                        onChange={e => setCliDocumentType(e.target.value)}>\n                                        <option value=\"CPF\" selected={cliDocumentType === 'CPF' ? true : false}>CPF</option>\n                                        <option value=\"CNPJ\" selected={cliDocumentType === 'CNPJ' ? true : false}>CNPJ</option>\n                                    </select>\n                                </div>\n                                <div>\n                                    <label> {cliDocumentType} </label>\n                                    <CurrencyFormat\n                                        format={cliDocumentType === 'CPF' ? \"###.###.###-##\" : \"###.###.###/###-##\"}\n                                        placeholder={cliDocumentType}\n                                        value={cliDocument ? cliDocument : ''}\n                                        onValueChange={e => setCliDocument(e.value)} />\n                                </div>\n                            </div>\n\n                            <label>  Endereço </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Endereço\"\n                                readOnly\n                                value={cliEdress} />\n\n                            <label>  Endereço adicional </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Endereço\"\n                                value={cliEdressAdditional}\n                                onChange={e => setCliEdressAdditional(e.target.value)} />\n\n                            <label>  Observações </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Observações do cliente\"\n                                readOnly\n                                value={cliObs} />\n                        </Tab>\n\n                        <Tab eventKey=\"collect\" title=\"Cobranças\">\n                            <MDBTable responsive hover bordered className=\"table\">\n                                <MDBTableHead>\n                                    <tr>\n                                        <th>Código</th>\n                                        <th>Status</th>\n                                        <th>Dt. Venc.</th>\n                                        <th>Dias em Atraso</th>\n                                        <th>Vlr. Originário</th>\n                                        <th>Débito Atualizado</th>\n                                    </tr>\n                                </MDBTableHead>\n                                <MDBTableBody>\n                                    {cCollects.map(collect => (\n                                        <tr key={collect.id}>\n                                            <td>{collect.id}</td>\n                                            <td>{collect.status}</td>\n                                            <td>{collect.dt_maturity}</td>\n                                            <td>{collect.days}</td>\n                                            <td>{collect.value}</td>\n                                            <td>{'R$ ' + strValueToFloat(collect.updated_debt).toLocaleString()} </td>\n                                        </tr>\n                                    ))}\n                                </MDBTableBody>\n                            </MDBTable>\n\n\n                            <div className=\"negotiation\">\n                                <div className=\"inline\">\n                                    <div style={{ marginRight: 5 }}>\n                                        <label> Débito Total </label>\n                                        <CurrencyInput\n                                            prefix=\"R$ \"\n                                            placeholder=\"Débito total\"\n                                            decimalSeparator=\",\"\n                                            groupSeparator=\".\"\n                                            value={aGrandValue}\n                                            readOnly />\n                                    </div>\n                                    <div>\n                                        <label> Desconto Máximo Total </label>\n                                        <CurrencyInput\n                                            prefix=\"R$ \"\n                                            placeholder=\"Desconto Máximo\"\n                                            decimalSeparator=\",\"\n                                            groupSeparator=\".\"\n                                            precision=\"2\"\n                                            value={floatValueToStr(grandMaximumDiscount)}\n                                            readOnly />\n                                    </div>\n                                </div>\n                                <div className=\"inline\">\n                                    <div>\n                                        <label> Status </label>\n                                        <select\n                                            className=\"select-search\"\n                                            onChange={e => setAStatus(e.target.value)}\n                                            disabled={isUpdating}>\n                                            <option value=\"Não Negociado\" selected={aStatus === 'Não Negociado' ? true : false}>Não Negociado</option>\n                                            <option value=\"Negociado\" selected={aStatus === 'Negociado' ? true : false}>Negociado</option>\n                                        </select>\n                                    </div>\n                                    <div style={{ marginLeft: 5 }}>\n                                        <label> R$ Valor Negociado </label>\n                                        <CurrencyInput\n                                            prefix=\"R$ \"\n                                            placeholder=\"Valor Negociado\"\n                                            decimalSeparator=\",\"\n                                            groupSeparator=\".\"\n                                            precision=\"2\"\n                                            value={aNegotiatedValue ? aNegotiatedValue : ''}\n                                            onChange={e => setANegotiatedValue(e)}\n                                            readOnly={((isUpdating) || (aStatus !== 'Negociado'))} />\n                                    </div>\n                                </div>\n\n                            </div>\n                        </Tab>\n                    </Tabs>\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={hide} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n\n            <div className=\"fab-container\">\n                <button onClick={setNew}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Attendance);","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport './style.css';\n\nfunction NotFound(props) {\n    const history = useHistory();\n    const header = { headers: { hash: props.state.user.hash }};\n\n    return (\n        <div className=\"not-found-container\">\n           <h1> Acesso restrito </h1>\n           <button onClick={()=> history.push('/')}> Voltar </button>\n           \n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(NotFound);\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport Downshift from 'downshift';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport CurrencyFormat from 'react-currency-format';\n\nimport './style.css';\nimport api from '../../services/api';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport * as callbackActions from '../../store/actions/callback';\n\nimport AppBar from '../../components/AppBar';\n\n\nfunction Client(props) {\n    const history = useHistory();\n    const header = { headers: { hash: props.state.user.hash }};\n    \n    const [show, setShow] = useState(false);\n    const [search, setSearch] = useState([]);\n    const [searchField, setSearchField] = useState([]);\n    const [registers, setRegisters] = useState([]);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [selectFilterField, setSelectFilterField] = useState('name')\n\n    const [code, setCode] = useState('')\n    const [name, setName] = useState('');\n    const [cellphone, setCellphone] = useState('');\n    const [phone, setPhone] = useState('');\n    const [phoneAdditional, setPhoneAdditional] = useState('');\n    const [emailAdditional, setEmailAdditional] = useState('');\n    const [edressAdditional, setEdressAdditional] = useState('');\n    const [companie, setCompanie] = useState('');\n    const [companieName, setCompanieName] = useState('');\n    const [companies, setCompanies] = useState([]);\n    const [email, setEmail] = useState('');\n    const [documentType, setDocumentType] = useState('CPF');\n    const [document, setDocument] = useState('');\n    const [edress, setEdress] = useState('');\n    const [obs, setObs] = useState('');\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('clients', header, header)\n            if (res.data.error) {\n                props.dispatch(loadingActions.setLoading(false));\n                props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + res.data.error));\n                return 0;\n            }\n            setRegisters(res.data);\n            setSearch(res.data)\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    const handleSubmit = async () => {\n        //VALIDAÇÕES\n        if (!name || !companieName) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n\n        props.dispatch(loadingActions.setLoading(true));\n        //CRIA OBJETO PARAR CADASTRAR/ALTERAR\n        const regTemp = {\n            code,\n            name,\n            cellphone,\n            phone,\n            companie,\n            edress_additional: edressAdditional,\n            email_additional: emailAdditional,\n            phone_additional: phoneAdditional,\n            email,\n            edress,\n            document_type: documentType,\n            document,\n            obs\n        }\n        setRegister(regTemp);\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`clients/${register.id}`, regTemp, header)\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //CADASTRO\n                const res = await api.post('clients', regTemp, header);\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`clients/${register.id}`, header);\n            loadRegisters();\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            setShow(false)\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        if (selectFilterField === 'id')\n            tempSearch = registers.filter(find =>\n                String(find.id).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        else if (selectFilterField === 'name')\n            tempSearch = registers.filter(find =>\n                String(find.name).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        else if (selectFilterField === 'document')\n            tempSearch = registers.filter(find =>\n                String(find.document).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        setSearch(tempSearch)\n    }\n\n    const setUpdating = async (reg) => {\n        setIsUpdating(true);\n        setRegister(reg);\n        setCode(reg.code)\n        setName(reg.name)\n        setCellphone(reg.cellphone)\n        setPhone(reg.phone)\n        setCompanie(reg.companie)\n        setCompanieName(reg.companie_name)\n        setEmailAdditional(reg.email_additional)\n        setPhoneAdditional(reg.phone_additional)\n        setEdressAdditional(reg.edress_additional)\n        setEmail(reg.email)\n        setEdress(reg.edress)\n        setDocumentType(reg.document_type)\n        setDocument(reg.document)\n        setObs(reg.obs)\n        setShow(true);\n    }\n\n    const clearValues = () => {\n        setCode('')\n        setName('')\n        setCellphone('')\n        setPhone('')\n        setEmailAdditional('')\n        setPhoneAdditional('')\n        setEdressAdditional('')\n        setCompanie('')\n        setCompanieName('')\n        setEdress('')\n        setDocumentType('CPF')\n        setDocument('')\n        setObs('')\n        setShow(true);\n    }\n\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n    return (\n        <div className=\"client-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <select\n                    className=\"select-search\"\n                    onChange={e => setSelectFilterField(e.target.value)}>\n                    <option value=\"id\">Código</option>\n                    <option value=\"name\" selected>Nome</option>\n                    <option value=\"document\" selected>Documento</option>\n                </select>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n            </div>\n\n            <MDBTable responsive hover bordered>\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Nome</th>\n                        <th>Documento</th>\n                        <th>Celular</th>\n                        <th>Telefone</th>\n                        <th>Credor</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => setUpdating(reg)}\n                            key={reg.id}>\n                            <td>{reg.id}</td>\n                            <td>{reg.name}</td>\n                            <td>{reg.document}</td>\n                            <td>{reg.cellphone}</td>\n                            <td>{reg.phone}</td>\n                            <td>{reg.companie + ' - ' + reg.companie_name}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title> Cadastro de Devedores </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        register.id ?\n                            <div>\n                                <label> Código </label>\n                                <label> {': ' + register.id} </label>\n                                <br />\n                            </div>\n                            : ''\n                    }\n\n                    <label> Credor </label>\n                    <Downshift inputValue={companieName} onChange={selection => {\n                        setCompanie(selection.id)\n                        setCompanieName(selection.name)\n                        setCompanies([])\n                    }}\n                        itemToString={item => (item ? item.name : '')}>\n                        {({ getInputProps, getItemProps, getMenuProps, isOpen, inputValue, getRootProps }) => (\n                            <div>\n                                <div {...getRootProps({}, { suppressRefError: true })} className=\"inline\">\n                                    <input value={companie} type=\"number\" readOnly style={{ width: 80, marginRight: 5 }} />\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Pesquisa\"\n                                        value={companieName}\n                                        onChangeCapture={async e => {\n                                            setCompanieName(e.target.value)\n                                            if (!e.target.value || e.target.value.length < 3) return;\n                                            const { data } = await api.get(`companies/find-by-name/${String(e.target.value).normalize(\"NFD\")}`, header);\n                                            setCompanies(data);\n                                        }}\n                                        {...getInputProps()} />\n                                </div>\n                                <ul {...getMenuProps({})}>\n                                    {isOpen ? companies\n                                        .filter(item => !inputValue || item.name.toLowerCase().includes(inputValue.toLowerCase()))\n                                        .map((item) => (\n                                            <li\n                                                className=\"search-field-results\"\n                                                {...getItemProps({ key: item.id, item })}>\n                                                {`${item.id} - ${item.name}`}\n                                            </li>))\n                                        : null}\n                                </ul>\n                            </div>\n                        )}\n                    </Downshift>\n\n\n\n\n                    <label> Código </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Codigo\"\n                        value={code}\n                        onChange={e => setCode(e.target.value)} />\n\n                    <label> Nome </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Nome\"\n                        value={name}\n                        onChange={e => setName(e.target.value)} />\n\n                    <label> Celular </label>\n                    <CurrencyFormat\n                        format=\"## (##) #########\"\n                        mask=\" \"\n                        placeholder=\"Celular\"\n                        value={cellphone ? cellphone : ''}\n                        onValueChange={e => setCellphone(e.value)} />\n\n                    <label> Telefone </label>\n                    <CurrencyFormat\n                        format=\"## (##) #########\"\n                        placeholder=\"Telefone\"\n                        value={phone ? phone : ''}\n                        onValueChange={e => setPhone(e.value)} />\n\n                    <label> Telefone Adicional </label>\n                    <CurrencyFormat\n                        format=\"## (##) #########\"\n                        placeholder=\"Telefone\"\n                        value={phoneAdditional ? phoneAdditional : ''}\n                        onValueChange={e => setPhoneAdditional(e.value)} />\n\n\n                    <label> Email </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Email\"\n                        value={email}\n                        onChange={e => setEmail(e.target.value)} />\n\n                    <label> Email Adicional </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Email\"\n                        value={emailAdditional}\n                        onChange={e => setEmailAdditional(e.target.value)} />\n\n                    <div className=\"inline\">\n                        <div style={{ marginRight: 5 }}>\n                            <label> Tipo de Cliente </label>\n                            <select\n                                className=\"select-search\"\n                                onChange={e => setDocumentType(e.target.value)}>\n                                <option value=\"CPF\" selected={documentType === 'CPF' ? true : false}>CPF</option>\n                                <option value=\"CNPJ\" selected={documentType === 'CNPJ' ? true : false}>CNPJ</option>\n                            </select>\n                        </div>\n                        <div>\n                            <label> {documentType} </label>\n                            <CurrencyFormat\n                                format={documentType === 'CPF' ? \"###.###.###-##\" : \"##.###.###/####-##\"}\n                                placeholder={documentType}\n                                value={document ? document : ''}\n                                onValueChange={e => setDocument(e.value)} />\n                        </div>\n                    </div>\n\n                    <label>  Endereço </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Endereço\"\n                        value={edress}\n                        onChange={e => setEdress(e.target.value)} />\n\n                    <label>  Endereço Adicional </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Endereço\"\n                        value={edressAdditional}\n                        onChange={e => setEdressAdditional(e.target.value)} />\n\n                    <label>  Observações </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Observações do cliente\"\n                        value={obs}\n                        onChange={e => setObs(e.target.value)} />\n\n\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={() => setShow(false)} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n            <div className=\"fab-container\">\n                <button onClick={setNew}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Client);","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport CurrencyFormat from 'react-currency-format';\nimport CurrencyInput from 'react-currency-input-field';\nimport './style.css';\nimport myFormat from '../../helpers/myFormat';\nimport api from '../../services/api';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport AppBar from '../../components/AppBar';\n\n\nfunction User(props) {\n    const history = useHistory();\n    const header = { headers: { hash: props.state.user.hash }};\n    \n    const [show, setShow] = useState(false);\n    const [search, setSearch] = useState([]);\n    const [searchField, setSearchField] = useState([]);\n    const [registers, setRegisters] = useState([]);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    const [name, setName] = useState('');\n    const [userName, setUserName] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [adress, setAdress] = useState('');\n    const [document, setDocument] = useState('');\n    const [identitet, setIdentitet] = useState('');\n    const [email, setEmail] = useState('');\n    const [phone, setPhone] = useState('');\n    const [obs, setObs] = useState('');\n\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const handleSubmit = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n\n        //VALIDAÇÕES\n        if (!name) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n\n        //VALIDAÇÕES\n        if (!userName) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n        //VALIDAÇÕES\n        if (!password) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n        //VALIDAÇÕES\n        if (password !== confirmPassword) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'As senhas devem ser identicas!'));\n            return 0\n        }\n\n        //CRIA OBJETO PARAR CADASTRAR/ALTERAR\n        const regTemp = {\n            name,\n            username: userName,\n            password,\n            adress,\n            document,\n            email,\n            phone,\n            identitet,\n            obs\n        }\n\n        setRegister(regTemp);\n\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`users/${register.id}`, regTemp, header)\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //CADASTRO\n                const res = await api.post('users', regTemp, header);\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`users/${register.id}`, header);\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            loadRegisters();\n            setShow(false)\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('users', header)\n            setRegisters(res.data);\n            setSearch(res.data)\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        tempSearch = registers.filter(find =>\n            find.name.toLowerCase().indexOf(String(searchField).toLowerCase()) > -1\n        )\n        setSearch(tempSearch)\n    }\n\n    const clearValues = () => {\n        setRegister({});\n        setName('');\n        setUserName('');\n        setPassword('');\n        setConfirmPassword('');\n        setAdress('');\n        setDocument('');\n        setIdentitet('');\n        setPhone('');\n        setEmail('');\n        setObs('');\n    }\n\n\n    const setUpdating = (reg) => {\n        setIsUpdating(true);\n        setRegister(reg);\n        setName(reg.name);\n        setUserName(reg.username);\n        setPassword(reg.password);\n        setConfirmPassword(reg.password);\n        setAdress(reg.adress);\n        setDocument(reg.document);\n        setIdentitet(reg.identitet);\n        setPhone(reg.phone);\n        setEmail(reg.email);\n        setObs(reg.obs);\n        setShow(true);\n    }\n\n    const hide = async (reg) => {\n        setShow(false);\n        clearValues();\n        setIsUpdating(false);\n    }\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n    return (\n        <div className=\"user-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <label> Nome: </label>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n            </div>\n\n            <MDBTable responsive hover bordered className=\"table\">\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Nome</th>\n                        <th>Usuário</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => setUpdating(reg)}\n                            key={reg.id}>\n                            <td>{reg.id}</td>\n                            <td>{reg.name}</td>\n                            <td>{reg.username}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title>Cadastro de Usuários</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        register.id ?\n                            <div>\n                                <label> Código </label>\n                                <label> {': ' + register.id} </label>\n                                <br />\n                            </div>\n                            : ''\n                    }\n                    <label> Nome </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Nome\"\n                        value={name}\n                        onChange={e => setName(e.target.value)} />\n\n                    <label> Usuário </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Usuário\"\n                        value={userName}\n                        onChange={e => setUserName(e.target.value)} />\n\n                    <label> Telefone </label>\n                    <CurrencyFormat\n                        format=\"## (##) #########\"\n                        placeholder=\"Telefone\"\n                        value={phone ? phone : ''}\n                        onValueChange={e => setPhone(e.value)} />\n\n                    <label> Email </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Email\"\n                        value={email}\n                        onChange={e => setEmail(e.target.value)} />\n\n                    <label>  Endereço </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Endereço\"\n                        value={adress}\n                        onChange={e => setAdress(e.target.value)} />\n\n                    <label> CPF </label>\n                    <CurrencyFormat\n                        format=\"###.###.###-##\"\n                        placeholder=\"CPF\"\n                        value={document ? document : ''}\n                        onValueChange={e => setDocument(e.value)}\n                        on />\n\n                    <label> Identidade </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Identidade\"\n                        value={identitet}\n                        onChange={e => setIdentitet(e.target.value)} />\n\n                    <label> Senha </label>\n                    <input\n                        type=\"password\"\n                        placeholder=\"Senha\"\n                        value={password}\n                        onChange={e => setPassword(e.target.value)} />\n\n                    <label> Repita a Senha </label>\n                    <input\n                        type=\"password\"\n                        placeholder=\"Repita a senha\"\n                        value={confirmPassword}\n                        onChange={e => setConfirmPassword(e.target.value)} />\n\n                    <label> Obs </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Observação\"\n                        value={obs}\n                        onChange={e => setObs(e.target.value)} />\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={() => setShow(false)} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n\n            <div className=\"fab-container\">\n                <button onClick={setNew}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(User);","import axios from 'axios';\n\nconst userUrl = String(window.location.href).slice(0, 14);\n\nvar baseURL = 'https://www.asaas.com/api/v3'; //PRODUÇÃO\n//var baseURL = 'https://sandbox.asaas.com/api/v3'; //TESTE\n\n\n\nconst api = axios.create({\n  baseURL: baseURL,\n})\n\nexport default api;","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport Downshift from 'downshift';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport CurrencyFormat from 'react-currency-format';\nimport CurrencyInput from 'react-currency-input-field';\nimport moment from 'moment';\n\nimport './style.css';\nimport api from '../../services/api';\nimport asaas from '../../services/asaas';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport * as callbackActions from '../../store/actions/callback';\n\nimport AppBar from '../../components/AppBar';\n\n\nfunction Billet(props) {\n    const history = useHistory();\n    const header = { headers: { hash: props.state.user.hash } };\n    const [show, setShow] = useState(false);\n    const [search, setSearch] = useState([]);\n    const [searchField, setSearchField] = useState([]);\n    const [registers, setRegisters] = useState([]);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [selectFilterField, setSelectFilterField] = useState('dt_due')\n\n    const [companie, setCompanie] = useState('');\n    const [companieName, setCompanieName] = useState('');\n    const [attendance, setAttendance] = useState('');\n    const [client, setClient] = useState('');\n    const [clientName, setClientName] = useState('');\n    const [dtGeneration, setDtGeneration] = useState('');\n    const [dtDue, setDtDue] = useState('');\n    const [qtParcel, setQtParcel] = useState('');\n    const [parcel, setParcel] = useState('');\n    const [status, setStatus] = useState('');\n    const [billetTotal, setBilletTotal] = useState('');\n    const [negotiatedValue, setNegotiatedValue] = useState('');\n    const [obs, setObs] = useState('');\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('billets', header)\n            if (res.data.error) {\n                props.dispatch(loadingActions.setLoading(false));\n                props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + res.data.error));\n                return 0;\n            }\n            setRegisters(res.data);\n            setSearch(res.data)\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    const handleSubmit = async () => {\n\n        const asaasHeader = {\n            headers: {\n                'Content-Type': 'application/json',\n                'access_token': '97e802fc8baf605139013c728b6178ff5ff2c007fcac83305a442b9431ff57fb'\n            }\n        };\n\n        const asaasBody = {\n            customer: \"16317475\",\n            billingType: \"BOLETO\",\n            dueDate: \"2017-06-10\",\n            value: 1,\n            description: \"Pedido 056984\",\n            externalReference: \"056984\", //campo para busca\n            postalService: false\n        }\n\n        const res = await asaas.post('payments', asaasBody, asaasHeader);\n\n        console.log(res)\n\n\n\n        return\n        //VALIDAÇÕES\n        if (!attendance || !client) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n\n        props.dispatch(loadingActions.setLoading(true));\n        //CRIA OBJETO PARAR CADASTRAR/ALTERAR\n        const regTemp = {\n            companie,\n            attendance,\n            client,\n            dt_generation: dtGeneration,\n            dt_due: dtDue,\n            qt_parcel: qtParcel,\n            parcel,\n            negotiated_value: negotiatedValue,\n            billet_total: billetTotal,\n            status,\n            obs\n        }\n        setRegister(regTemp);\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`billets/${register.id}`, regTemp, header)\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //CADASTRO\n                const res = await api.post('billets', regTemp, header);\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`billets/${register.id}`, header);\n            loadRegisters();\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            setShow(false)\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        if (selectFilterField === 'dtDue')\n            tempSearch = registers.filter(find =>\n                String(find.dt_due).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n        setSearch(tempSearch)\n    }\n\n    const setUpdating = async (reg) => {\n        setIsUpdating(true);\n        setRegister(reg);\n        setCompanie(reg.companie);\n        setCompanieName(reg.companie_name);\n        setClient(reg.client)\n        setClientName(reg.client_name)\n        setAttendance(reg.attendance);\n        setDtGeneration(reg.dt_generation);\n        setDtDue(reg.dt_due);\n        setQtParcel(reg.qt_parcel);\n        setParcel(reg.parcel);\n        setStatus(reg.status);\n        setObs(reg.obs)\n        setShow(true);\n    }\n\n    const clearValues = () => {\n        setCompanie('');\n        setCompanieName('');\n        setClient('');\n        setClientName('');\n        setAttendance('');\n        setDtGeneration(moment().format('L'));\n        setDtDue('');\n        setQtParcel('');\n        setParcel('');\n        setStatus('NÃO GERADO');\n        setObs('')\n        setShow(true);\n    }\n\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n\n    const getByAttendance = async attendanceId => {\n        const res = await api.get(`attendances/get-by-id/${attendanceId}`, header);\n        if (!res.data)\n            return;\n\n        setCompanie(res.data.companie);\n        setCompanieName(res.data.companie_name);\n        setClient(res.data.client);\n        setClientName(res.data.client_name);\n        setNegotiatedValue(res.data.negotiated_value);\n        setBilletTotal(res.data.negotiated_value);\n        setQtParcel('1');\n        setParcel('1');\n        setStatus('NÃO GERADO');\n    }\n\n    return (\n        <div className=\"billet-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <select\n                    className=\"select-search\"\n                    onChange={e => setSelectFilterField(e.target.value)}>\n                    <option value=\"dt_due\" selected>Dt. Vencimento</option>\n                </select>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n            </div>\n\n            <MDBTable responsive hover bordered>\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Atendimento</th>\n                        <th>Credor</th>\n                        <th>Devedor</th>\n                        <th>Dt. Vencimento</th>\n                        <th>Dt. Geração</th>\n                        <th>Status</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => setUpdating(reg)}\n                            key={reg.id}>\n                            <td>{reg.id}</td>\n                            <td>{reg.attendance}</td>\n                            <td>{reg.companie + ' - ' + reg.companie_name}</td>\n                            <td>{reg.client + ' - ' + reg.client_name}</td>\n                            <td>{reg.dt_due}</td>\n                            <td>{reg.dt_generation}</td>\n                            <td>{reg.status}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title> Geração de Boletos </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        register.id ?\n                            <div>\n                                <label> Código </label>\n                                <label> {': ' + register.id} </label>\n                                <br />\n                            </div>\n                            : ''\n                    }\n\n                    <div style={{ width: 150 }} >\n                        <label> Código do Atendimento </label>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Codigo\"\n                            value={attendance}\n                            onChange={e => setAttendance(e.target.value)}\n                            onBlur={e => getByAttendance(e.target.value)} />\n                    </div>\n\n                    <label> Credor </label>\n                    <div className=\"inline\">\n                        <input\n                            style={{ width: 90, marginRight: 5 }}\n                            type=\"text\"\n                            placeholder=\"Código\"\n                            value={companie}\n                            readOnly />\n                        <input\n                            type=\"text\"\n                            placeholder=\"Descrição\"\n                            value={companieName}\n                            readOnly />\n                    </div>\n\n                    <label> Devedor </label>\n                    <div className=\"inline\">\n                        <input\n                            style={{ width: 90, marginRight: 5 }}\n                            type=\"text\"\n                            placeholder=\"Código\"\n                            value={client}\n                            readOnly />\n                        <input\n                            type=\"text\"\n                            placeholder=\"Descrição\"\n                            value={clientName}\n                            readOnly />\n                    </div>\n\n                    <div className=\"inline\">\n\n                        <div style={{ width: 150, marginRight: 5 }}>\n                            <label> Dt. Geração </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Dt. Geração\"\n                                value={dtGeneration}\n                                readOnly />\n                        </div>\n\n                        <div style={{ width: 150 }}>\n                            <label> Dt. Vencimento </label>\n                            <CurrencyFormat\n                                format=\"##/##/####\"\n                                placeholder=\"Dt. de vencimento\"\n                                value={dtDue ? dtDue : ''}\n                                onValueChange={e => setDtDue(e.formattedValue)}\n                                readOnly={isUpdating} />\n                        </div>\n                    </div>\n\n                    <div className=\"inline\">\n                        <div style={{ width: 150, marginRight: 5 }}>\n                            <label> Valor Negociado </label>\n                            <CurrencyInput\n                                prefix=\"R$ \"\n                                placeholder=\"Valor Negociado\"\n                                decimalSeparator=\",\"\n                                groupSeparator=\".\"\n                                precision=\"2\"\n                                value={negotiatedValue ? negotiatedValue : ''}\n                                readOnly />\n                        </div>\n                        <div style={{ width: 150 }}>\n                            <label> Valor da Parcela </label>\n                            <CurrencyInput\n                                prefix=\"R$ \"\n                                placeholder=\"Valor da Parcela\"\n                                decimalSeparator=\",\"\n                                groupSeparator=\".\"\n                                precision=\"2\"\n                                value={billetTotal ? billetTotal : ''}\n                                onChange={e => setBilletTotal(e)}\n                                readOnly={isUpdating} />\n                        </div>\n                    </div>\n\n                    <div className=\"inline\">\n                        <div style={{ width: 150, marginRight: 5 }}>\n                            <label> Qtde. Parcelas </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Qtde. Parcelas\"\n                                value={qtParcel}\n                                onChange={e => setQtParcel(e.target.value)}\n                                readOnly={isUpdating} />\n                        </div>\n\n                        <div style={{ width: 150 }}>\n                            <label> Parcela </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Parcela\"\n                                value={parcel}\n                                onChange={e => setParcel(e.target.value)}\n                                readOnly={isUpdating} />\n                        </div>\n                    </div>\n\n                    <div style={{ width: 300 }}>\n                        <label> Status </label>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Status\"\n                            value={status}\n                            readOnly />\n                    </div>\n\n                    <label>  Observações </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Observações do billete\"\n                        value={obs}\n                        onChange={e => setObs(e.target.value)} />\n\n\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={() => setShow(false)} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n            <div className=\"fab-container\">\n                <button onClick={setNew}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Billet);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport * as userActions from './store/actions/user';\n\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport Collect from './pages/Collect';\nimport ImportCollects from './pages/ImportCollects';\nimport Companie from './pages/Companie';\nimport Attendance from './pages/Attendance'\nimport NotFound from './pages/NotFound';\nimport Client from './pages/Client';\nimport User from './pages/User';\nimport Billet from './pages/Billet';\n\nfunction Routes(props) {\n\n    useEffect(() => {\n        props.dispatch(userActions.setUser(localStorage.getItem('@sg/user/id'), localStorage.getItem('@sg/user/name'), localStorage.getItem('@sg/user/hash')));\n    }, []);\n\n    return (\n        <BrowserRouter>\n            {props.state.user.id < 1 ?\n                <Switch>\n                    <Route exact path=\"/\" component={Login} />\n                    <Route exact path=\"/billet\" component={Billet} />\n                    <Route path='*' component={NotFound} />\n                </Switch>\n                :\n                <Switch>\n                    <Route exact path=\"/\" component={Dashboard} />\n                    <Route exact path=\"/dashboard\" component={Dashboard} />\n                    <Route exact path=\"/attendance\" component={Attendance} />\n                    <Route exact path=\"/collect\" component={Collect} />\n                    <Route exact path=\"/import-collects\" component={ImportCollects} />\n                    <Route exact path=\"/companie\" component={Companie} />\n                    <Route exact path=\"/client\" component={Client} />\n                    <Route exact path=\"/user\" component={User} />\n                    <Route exact path=\"/billet\" component={Billet} />\n                </Switch>\n            }\n        </BrowserRouter>\n    );\n}\nexport default connect(state => ({ state }))(Routes);\n","const INITIAL_STATE = {\n    visible: false\n}\n\nexport default function loading(state = INITIAL_STATE, action) {\n    if (action.type === 'SET_LOADING') {\n        return {\n            ...state, \n            visible: action.visible,\n        }\n    }\n    return state;\n}","const INITIAL_STATE = {\n    visible: false,\n    style: '',\n    message: ''\n}\n\nexport default function loading(state = INITIAL_STATE, action) {\n    if (action.type === 'SET_TOAST') {\n        return {\n            ...state, \n            visible: action.visible,\n            style: action.type,\n            message: action.message\n        }\n    }\n    return state;\n}","const INITIAL_STATE = {\n    visible:  false,\n    table: '',\n    value: ''\n}\n\nexport default function callBackValue(state = INITIAL_STATE, action) {\n    if (action.type === 'SET_CALLBACK') {\n        return {\n            ...state, \n            visible: action.visible,\n            value: action.value,\n            table: action.table\n        }\n    }\n    return state;\n}","const INITIAL_STATE = {\n    id: 0,\n    name: '',\n    hash: ''\n}\n\nexport default function userValue(state = INITIAL_STATE, action) {\n    if (action.type === 'SET_USER') {\n        return {\n            ...state, \n            id: action.id,\n            name: action.name,\n            hash: action.hash,\n        }\n    }\n    return state;\n}","import { combineReducers } from 'redux';\n\nimport loading from './loading';\nimport toast from './toast';\nimport callback from './callback';\nimport user from './user';\n\nexport default combineReducers ({\n    loading,\n    toast,\n    callback,\n    user\n})","import { createStore } from 'redux';\n\nimport rootReducers from './reducers';\n\nconst store = createStore(rootReducers);\n\nexport default store;","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport './style.css';\n\nfunction Loading(props) {\n\n    return (\n        <div\n            className=\"loading-container\"\n            style={props.state.loading.visible ? { height: '100%' } : { height: '0' }}>\n            {props.state.loading.visible ?\n                <Spinner\n                    animation=\"grow\"\n                    variant=\"success\"\n                    className=\"loading-spinner\" />\n                : <></>}\n        </div >\n    );\n}\nexport default connect(state => ({ state }))(Loading);","import React from 'react';\nimport { Toast } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport './style.css';\nimport * as toastActions from '../../store/actions/toast';\n\nfunction ToastApp(props) {\n    return (\n        <div className=\"toast-container\">\n            <Toast \n                autohide\n                delay=\"5000\"\n                className=\"toast\"\n                show={props.state.toast.visible} \n                onClose={() => props.dispatch(toastActions.setToast(false, '', ''))} >\n                <Toast.Header>\n                    <strong className=\"mr-auto\">SG</strong>\n                </Toast.Header>\n                <Toast.Body>{props.state.toast.message}</Toast.Body>\n            </Toast>\n        </div>\n    );\n}\nexport default connect(state => ({ state }))(ToastApp);","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport { Modal } from 'react-bootstrap';\nimport './style.css';\n\nimport api from '../../services/api';\n\nimport * as loadingActions from '../../store/actions/loading';\nimport * as callBackActions from '../../store/actions/callback';\nimport * as toastActions from '../../store/actions/toast';\n\nfunction CallBack(props) {\n    const [registers, setRegisters] = useState([]);\n\n    const handleSearch = async (name) => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get(props.state.callback.table + '/find-by-name/' + name)\n            if (res.data.error) {\n                props.dispatch(loadingActions.setLoading(false));\n                props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + res.data.error));\n                return 0;\n            }\n            setRegisters(res.data);\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    return (\n        <div\n            className=\"callback-container\"\n            style={props.state.callback.visible ? { height: '100%' } : { height: '0' }}>\n            {props.state.callback.visible ?\n                <Modal className=\"modal callback\" show={props.state.callback.visible} onHide={() => props.dispatch(callBackActions.setCallback(false, '', ''))}>\n                    <Modal.Header>\n                        <Modal.Title> Consulta de registros </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className=\"filters\">\n                            <input\n                                className=\"field-search\"\n                                placeholder=\"Busca por nome\"\n                                onChange={e => handleSearch(e.target.value)}\n                                type=\"text\" />\n                        </div>\n\n                        <MDBTable responsive hover bordered className=\"table\">\n                            <MDBTableHead>\n                                <tr>\n                                    <th>Código</th>\n                                    <th>Nome</th>\n                                </tr>\n                            </MDBTableHead>\n                            <MDBTableBody>\n                                {registers.map(reg => (\n                                    <tr key={reg.id}>\n                                        <td>{reg.id}</td>\n                                        <td>{reg.name}</td>\n                                    </tr>\n                                ))}\n                            </MDBTableBody>\n                        </MDBTable>\n                    </Modal.Body>\n                </Modal>\n                : <></>}\n        </div >\n    );\n}\nexport default connect(state => ({ state }))(CallBack);","\nexport function setCallback(visible, table, value) {\n    return {\n        type: 'SET_CALLBACK',\n        visible,\n        table,\n        value,\n    }\n}","import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport moment from 'moment';\nimport ptbr from 'moment/locale/pt-br'\nimport Routes from './Routes'\nimport store from './store';\n\nimport Loading from './components/Loading';\nimport ToastApp from './components/ToastApp';\nimport CallBack from './components/CallBack';\n\n\nfunction App() {\n  useEffect(()=> {\n    moment().locale('pt-br');\n  },[])\n\n  return (\n    <Provider store={store}>\n      <Routes />\n      <Loading />\n      <ToastApp />\n      <CallBack />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const strValueToFloat = (str) => {\n    var r = str + '';\n    r = r.replace(' ','')\n    r = r.replace('R$','')\n    r = r.replace('.','')\n    r = r.replace(',','.')\n    return r ? parseFloat(r) : 0\n}\n\nconst floatValueToStr = (flt) => {\n    r = parseFloat(flt?flt:0);\n    var r = parseFloat(r.toFixed(2)) + '';\n    r = r.replace('.',',')\n    return r ? r : '0,00'\n}\n\nconst configSheetStr = (str) => {\n    var r =  str + ''\n    r =  r.replace(' ','')\n    r =  r.replace('R$','')\n    r =  r.replace('.','+')\n    r =  r.replace(',','.')\n    r =  r.replace('+',',')\n    return  r ? r : '0,00'\n}\n\n\n\nmodule.exports = {\n    strValueToFloat,\n    floatValueToStr,\n    configSheetStr\n}"],"sourceRoot":""}