{"version":3,"sources":["store/actions/loading.js","store/actions/toast.js","services/api.js","pages/Login/index.js","components/AppBar/index.js","pages/Dashboard/index.js","pages/Collect/index.js","pages/ImportCollects/index.js","pages/Companie/index.js","pages/Attendance/index.js","pages/NotFound/index.js","pages/Client/index.js","pages/User/index.js","Routes.js","store/reducers/loading.js","store/reducers/toast.js","store/reducers/callback.js","store/reducers/user.js","store/reducers/index.js","store/index.js","components/Loading/index.js","components/ToastApp/index.js","components/CallBack/index.js","store/actions/callback.js","App.js","serviceWorker.js","index.js","assets/login.png","helpers/myFormat.js"],"names":["setLoading","visible","type","setToast","style","message","api","axios","create","baseURL","connect","state","props","history","useHistory","useState","username","setUsername","password","setPassword","handleLogin","e","a","preventDefault","dispatch","loadingActions","post","res","data","localStorage","setItem","id","name","push","toastActions","className","onSubmit","src","imgLogin","alt","htmlFor","value","onChange","target","AppBar","Navbar","expand","Brand","onClick","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","Text","Link","useEffect","show","setShow","registers","setRegisters","register","setRegister","isUpdating","setIsUpdating","searchField","setSearchField","search","setSearch","selectFilterField","setSelectFilterField","client","setClient","clientName","setClientName","clients","setClients","status","setStatus","companie","setCompanie","companieName","setCompanieName","companies","setCompanies","account","setAccount","document","setDocument","dtMaturity","setDtMaturity","days","setDays","setValue","updatedDebt","setUpdatedDebt","setDefaultHonorary","defaultInterest","setDefaultInterest","interestCalculed","setInterestCalculed","maximumDiscount","setMaximumDiscount","negotiatedValue","setNegotiatedValue","defaultPenalty","setDefaultPenalty","penaltyCalculed","setPenaltyCalculed","honoraryCalculed","setHonoraryCalculed","honoraryPer","setHonoraryPer","obs","setObs","loadRegisters","get","handleSubmit","calculate","regTemp","dt_maturity","updated_debt","maximum_discount","negotiated_value","honorary_per","put","clearValues","handleDelete","delete","handleSearch","tempSearch","filter","find","String","toLowerCase","indexOf","client_name","client_document","client_phone","client_cellphone","setUpdating","reg","companie_name","default_interest","default_honorary","default_penalty","moment","_isValid","diff","calculedDays","parseFloat","strValueToFloat","toFixed","interest","floatValueToStr","penalty","honorary","debit","updateAllDebits","selected","onKeyPress","responsive","hover","bordered","map","cursor","key","toLocaleString","Modal","onHide","console","log","Header","Title","Body","inputValue","selection","itemToString","item","getInputProps","getItemProps","getMenuProps","isOpen","getRootProps","suppressRefError","readOnly","width","marginRight","placeholder","onChangeCapture","length","normalize","includes","format","onValueChange","formattedValue","onBlur","prefix","decimalSeparator","groupSeparator","marginLeft","backgroundColor","sheetFile","React","useRef","importedArray","setImportedArray","companieId","setCompanieId","loadCompanies","configStrTelephone","tel","telFormated","toString","replace","substring","insetOne","NOME_CLIENTE","cellphone","FONE_1","FONE_2","phone","FONE_3","DT_VENC","DESC_MAX","VLR_ORIGINARIO","sleep","ms","Promise","resolve","setTimeout","registerOnBackend","then","readFile","sheet","f","current","files","FileReader","reader","readAsArrayBuffer","onload","Uint8Array","result","XLSX","arr","i","fromCharCode","bstr","join","workbook","first_sheet_name","SheetNames","worksheet","Sheets","sheet_to_json","raw","xlsxJSON","tempArray","json","configSheetStr","comp","ref","disabled","collect","__rowNum__","setName","cnpj","setCnpj","edress","setEdress","setPhone","responsibleStaff","setResponsibleStaff","dtContract","setDtContract","dtRenovation","setDtRenovation","defaultHonorary","monthlyValue","setMonthlyValue","payday","setPayDay","paymentType","setPaymentType","responsible_staff","dt_contract","dt_renovation","monthly_value","payment_type","decimalsLimit","grandMaximumDiscount","setGrandMaximumDiscount","aClient","setAClient","aClientName","setAClientName","getItem","aUser","setAUser","aUserName","setAUserName","aDtBegin","setADtBegin","aDtEnd","setADtEnd","aDescription","setADescription","aStatus","setAStatus","aNegotiatedValue","setANegotiatedValue","aGrandValue","setAGrandValue","aObs","setAObs","setCliClient","cliId","setCliId","cliCode","cliPhoneAdditional","setCliPhoneAdditional","cliEmailAdditional","setCliEmailAdditional","cliEdressAdditional","setCliEdressAdditional","cliName","setCliName","cliCellphone","setCliCellphone","cliPhone","setCliPhone","cliCompanie","setCliCompanie","cliCompanieName","setCliCompanieName","cliEmail","setCliEmail","setCliAttendance","cliDocumentType","setCliDocumentType","cliDocument","setCliDocument","cliEdress","setCliEdress","cliObs","setCliObs","cCollects","setCCollects","dt_begin","dt_end","user","description","grand_value","updateClient","closeCollectsByClient","getCollectsByAttendanceId","attendanceId","tempGrandMaximumDiscount","tempAGrandValue","getCollectsByClientId","setClientValues","phone_additional","email","email_additional","attendance","edress_additional","document_type","hide","code","clientId","user_name","Tabs","defaultActiveKey","Tab","eventKey","precision","NotFound","setCode","setCellphone","phoneAdditional","setPhoneAdditional","emailAdditional","setEmailAdditional","edressAdditional","setEdressAdditional","setEmail","documentType","setDocumentType","error","mask","userName","setUserName","confirmPassword","setConfirmPassword","adress","setAdress","identitet","setIdentitet","on","Routes","exact","path","component","Login","Dashboard","Attendance","Collect","ImportCollects","Companie","Client","User","INITIAL_STATE","table","combineReducers","loading","action","toast","callback","store","createStore","rootReducers","height","Spinner","animation","variant","Toast","autohide","delay","onClose","App","locale","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","module","exports","str","r","flt"],"mappings":"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","file":"static/js/main.c624ef41.chunk.js","sourcesContent":["export function setLoading (visible) {\n    return {\n        type: 'SET_LOADING',\n        visible,\n    }\n}","export function setToast (visible, style, message) {\n    return {\n        type: 'SET_TOAST',\n        visible,\n        style,\n        message\n    }\n}","import axios from 'axios';\n\n//const baseURL = 'https://sgcog.herokuapp.com';\n//const baseURL = 'http://localhost:3333';\nconst baseURL = 'http://177.36.223.44:3333';\n\nconst api = axios.create({\n  baseURL: baseURL,\n})\n\nexport default api;","import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport './style.css';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as userActions from '../../store/actions/user';\nimport * as toastActions from '../../store/actions/toast';\nimport api from '../../services/api';\nimport imgLogin from '../../assets/login.png';\n\nfunction Login(props) {\n    const history = useHistory();\n    const [username, setUsername] = useState();\n    const [password, setPassword] = useState();\n\n    const handleLogin = async e => {\n        e.preventDefault();\n        props.dispatch(loadingActions.setLoading(true));\n        const res = await api.post('users/login', {\n            username: username,\n            password: password\n        });\n        if (!res.data)\n        props.dispatch(toastActions.setToast(true, 'success', 'Usuario ou senha incorretos.'));\n        else {\n            localStorage.setItem('@sg/user/id', res.data.id);\n            localStorage.setItem('@sg/user/name', res.data.name);\n            history.push('dashboard');\n        }\n\n            props.dispatch(loadingActions.setLoading(false));\n    }\n\n    return (\n        <div className=\"login-container\">\n            <form onSubmit={handleLogin}>\n                <img src={imgLogin} alt=\"Login\" />\n                <label htmlFor=\"fname\">Usuario</label>\n                <input\n                    type=\"text\"\n                    value={username}\n                    onChange={e => setUsername(e.target.value)} />\n                <label htmlFor=\"lname\">Senha</label>\n                <input\n                    type=\"password\"\n                    value={password}\n                    onChange={e => setPassword(e.target.value)} />\n\n                <button type=\"submit\"> Login </button>\n\n            </form>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Login);","import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport './style.css';\n\nexport default function AppBar() {\n    const history = useHistory();\n\n    return (\n        <Navbar expand=\"lg\" className=\"navbar\" >\n            <Navbar.Brand id=\"basic-nav-dropdown\" onClick={() => history.push('dashboard')}>Dashboard</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <NavDropdown title=\"Cadastro\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item id=\"color-item\" onClick={() => history.push('attendance')} > Atendimentos </NavDropdown.Item>\n                        <NavDropdown.Item id=\"color-item\" onClick={() => history.push('client')} > Devedores </NavDropdown.Item>\n                        <NavDropdown.Item id=\"color-item\" onClick={() => history.push('collect')} > Débitos </NavDropdown.Item>\n                        <NavDropdown.Item id=\"color-item\" onClick={() => history.push('companie')} > Credores </NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Importação\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item onClick={() => history.push('import-collects')}>Importar Cobranças</NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Controle de Usuários\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item onClick={() => history.push('user')}>Cadastro de Usuário </NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n                <Navbar.Collapse className=\"justify-content-end\">\n                    <Navbar.Text>\n                        <Nav.Link id=\"basic-nav-dropdown\" onClick={() => history.push('/')}>Sair</Nav.Link>\n                    </Navbar.Text>\n                </Navbar.Collapse>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport './style.css';\nimport AppBar from '../../components/AppBar';\nimport imgLogin from '../../assets/login.png';\n\nfunction Dashboard(props) {\n    const history = useHistory();\n\n    useEffect(() => {\n        \n    },[])\n\n\n    return (\n        <div>\n            <AppBar />\n            <div className=\"dashboard-container\" >\n                <img src={imgLogin} alt=\"Login\" />\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Dashboard);","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport CurrencyFormat from 'react-currency-format';\nimport CurrencyInput from 'react-currency-input-field';\nimport Downshift from 'downshift';\nimport moment from 'moment';\n\nimport './style.css';\nimport api from '../../services/api';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport * as callbackActions from '../../store/actions/callback';\nimport AppBar from '../../components/AppBar';\nimport { strValueToFloat, floatValueToStr } from '../../helpers/myFormat';\n\n\nfunction Client(props) {\n    const history = useHistory();\n    const [show, setShow] = useState(false);\n    const [registers, setRegisters] = useState([]);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [searchField, setSearchField] = useState('');\n    const [search, setSearch] = useState([]);\n    const [selectFilterField, setSelectFilterField] = useState('client_name')\n\n    //FIELDS\n    const [client, setClient] = useState('');\n    const [clientName, setClientName] = useState('');\n    const [clients, setClients] = useState([]);\n\n    const [status, setStatus] = useState('Aberto');\n    const [companie, setCompanie] = useState('');\n    const [companieName, setCompanieName] = useState('');\n    const [companies, setCompanies] = useState([]);\n    const [account, setAccount] = useState('');\n    const [document, setDocument] = useState('');\n    const [dtMaturity, setDtMaturity] = useState('');\n    const [days, setDays] = useState('');\n    const [value, setValue] = useState('');\n    const [updatedDebt, setUpdatedDebt] = useState('');\n    const [defaultHonorary, setDefaultHonorary] = useState('');\n    const [defaultInterest, setDefaultInterest] = useState('');\n    const [interestCalculed, setInterestCalculed] = useState('');\n    const [maximumDiscount, setMaximumDiscount] = useState('');\n    const [negotiatedValue, setNegotiatedValue] = useState('');\n    const [defaultPenalty, setDefaultPenalty] = useState('');\n    const [penaltyCalculed, setPenaltyCalculed] = useState('');\n    const [honoraryCalculed, setHonoraryCalculed] = useState('');\n    const [honoraryPer, setHonoraryPer] = useState('');\n    const [obs, setObs] = useState('');\n\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('collects')\n            await setRegisters(res.data);\n            await setSearch(res.data);\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    const handleSubmit = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        calculate();\n\n        //VALIDAÇÕES\n        if (!client) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n\n        //CRIA OBJETO PARAR CADASTRAR/ALTERAR\n        const regTemp = {\n            client,\n            status,\n            document,\n            dt_maturity: dtMaturity,\n            value,\n            account,\n            days,\n            companie,\n            updated_debt: updatedDebt,\n            maximum_discount: maximumDiscount,\n            negotiated_value: negotiatedValue,\n            honorary_per: honoraryPer,\n            obs: obs\n        }\n        setRegister(regTemp);\n\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`collects/${register.id}`, regTemp)\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //CADASTRO\n                const res = await api.post('collects', regTemp);\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(loadingActions.setLoading(false));\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`collects/${register.id}`);\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            setShow(false);\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        if (selectFilterField === 'id')\n            tempSearch = await registers.filter(find =>\n                String(find.id).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        else if (selectFilterField === 'client_name')\n            tempSearch = registers.filter(find =>\n                String(find.client_name).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        else if (selectFilterField === 'client_document')\n            tempSearch = registers.filter(find =>\n                String(find.client_document).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        else if (selectFilterField === 'client_phones')\n            tempSearch = registers.filter(find =>\n                String(find.client_phone + find.client_cellphone).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n\n        setSearch(tempSearch)\n    }\n\n    const setUpdating = async (reg) => {\n        setRegister(reg);\n        setClient(reg.client);\n        setClientName(reg.client_name);\n        setStatus(reg.status);\n        setDays(reg.days);\n        setCompanie(reg.companie)\n        setCompanieName(reg.companie_name)\n        setUpdatedDebt(reg.updated_debt)\n        setDocument(reg.document)\n        setDefaultInterest(reg.default_interest)\n        setDefaultHonorary(reg.default_honorary)\n        setAccount(reg.account)\n        setDtMaturity(reg.dt_maturity)\n        setMaximumDiscount(reg.maximum_discount)\n        setNegotiatedValue(reg.negotiated_value)\n        setHonoraryPer(reg.default_honorary);\n        setDefaultPenalty(reg.default_penalty)\n        setValue(reg.value);\n        setObs(reg.obs)\n\n        const res = await api.get(`companies/find-by-id/${reg.companie}`)\n        if (res.data) {\n            setCompanieName(res.data.name)\n            setDefaultInterest(res.data.default_interest)\n            setHonoraryPer(res.data.default_honorary)\n            setDefaultPenalty(res.data.default_penalty)\n        }\n\n        setIsUpdating(true);\n        setShow(true)\n    }\n\n    const clearValues = () => {\n        setClient('')\n        setClientName('')\n        setStatus('Aberto')\n        setDocument('');\n        setDtMaturity('');\n        setAccount('');\n        setCompanie('')\n        setCompanieName('')\n        setUpdatedDebt('')\n        setDefaultHonorary('')\n        setDefaultInterest('')\n        setMaximumDiscount('')\n        setNegotiatedValue('')\n        setHonoraryPer('');\n        setObs('')\n        setDays('');\n        setValue('');\n        setDefaultPenalty('')\n        loadRegisters();\n    }\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n    const calculate = async () => {\n        if (!moment(dtMaturity, \"DD/MM/YYYY\")._isValid)\n            setDays(0)\n\n        const calculedDays = await moment(dtMaturity, \"DD/MM/YYYY\").diff(moment(), 'days')\n\n        if (calculedDays > -1)\n            setDays(0)\n\n        //DAYS\n        setDays(calculedDays * -1)\n        \n        //INTEREST (JUROS)\n        const interest = await parseFloat((((strValueToFloat(defaultInterest) / 100) * strValueToFloat(value)) * strValueToFloat(days))).toFixed(2);\n        setInterestCalculed(floatValueToStr(interest))\n\n        //PENALTY (MULTA)\n        const penalty = await parseFloat(((strValueToFloat(defaultPenalty) / 100) * strValueToFloat(value))).toFixed(2);\n        setPenaltyCalculed(floatValueToStr(penalty))\n\n        //HONORARY (HONORÁRIOS)\n        const honorary = await parseFloat(((strValueToFloat(value) + strValueToFloat(penaltyCalculed) + strValueToFloat(interestCalculed)) * (strValueToFloat(honoraryPer) / 100))).toFixed(2);\n        setHonoraryCalculed(floatValueToStr(honorary))\n\n        const debit = await parseFloat(((strValueToFloat(interestCalculed) + strValueToFloat(penaltyCalculed) + strValueToFloat(honoraryCalculed) + strValueToFloat(value)))).toFixed(2);\n        setUpdatedDebt(floatValueToStr(debit))\n    }\n\n    const updateAllDebits = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('collects/recalc');\n            await loadRegisters();\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Todos os débitos foram atualizados.'));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n\n    return (\n        <div className=\"collect-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <select\n                    className=\"select-search\"\n                    onChange={e => setSelectFilterField(e.target.value)}>\n                    <option value=\"id\">Código</option>\n                    <option value=\"client_name\" selected> Nome do cliente</option>\n                    <option value=\"client_document\" > Documento do cliente</option>\n                    <option value=\"client_phones\" > Telefone do cliente</option>\n                </select>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n                <button onClick={updateAllDebits}> Atualizar todos os débitos </button>\n            </div>\n\n            <MDBTable responsive hover bordered>\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Cliente</th>\n                        <th>Status</th>\n                        <th>Dt. Venc. </th>\n                        <th>Vlr. Originário </th>\n                        <th>Dias em Atraso</th>\n                        <th>Débito Atualizado</th>\n                        <th>Credor</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr\n                            style={{ cursor: 'pointer' }}\n                            onClick={async () => { await setUpdating(reg) }}\n                            key={reg.id}>\n                            <td>{reg.id}</td>\n                            <td>{reg.client + ' - ' + reg.client_name}</td>\n                            <td>{reg.status}</td>\n                            <td>{reg.dt_maturity}</td>\n                            <td>{reg.value ? strValueToFloat(reg.value).toLocaleString() : 0}</td>\n                            <td>{reg.days}</td>\n                            <td>{reg.updated_debt ? strValueToFloat(reg.updated_debt).toLocaleString() : 0}</td>\n                            <td>{reg.companie + ' - ' + reg.companie_name}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title>Cadastro de Débito</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        register.id ?\n                            <div>\n                                <label> Código </label>\n                                <label> {': ' + register.id} </label>\n                                <br />\n                            </div>\n                            : ''\n                    }\n                    <br />\n\n                    <label> Credor </label>\n                    <Downshift inputValue={companieName} onChange={selection => {\n                        setCompanies(selection)\n                        setCompanie(selection.id)\n                        setCompanieName(selection.name)\n                        setDefaultInterest(selection.default_interest)\n                        setHonoraryPer(selection.default_honorary)\n                        setDefaultPenalty(selection.default_penalty)\n                    }}\n                        itemToString={item => (item ? item.name : '')}>\n                        {({ getInputProps, getItemProps, getMenuProps, isOpen, inputValue, getRootProps }) => (\n                            <div>\n                                <div {...getRootProps({}, { suppressRefError: true })} className=\"inline\">\n                                    <input value={companie} type=\"number\" readOnly style={{ width: 80, marginRight: 5 }} />\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Pesquisa\"\n                                        value={companieName}\n                                        onChangeCapture={async e => {\n                                            setCompanieName(e.target.value)\n                                            if (!e.target.value || e.target.value.length < 3) return;\n                                            const { data } = await api.get(`companies/find-by-name/${String(e.target.value).normalize(\"NFD\")}`);\n                                            setCompanies(data);\n                                        }}\n                                        {...getInputProps()} />\n                                </div>\n                                <ul {...getMenuProps({})}>\n                                    {isOpen ? companies\n                                        .filter(item => !inputValue || item.name.toLowerCase().includes(inputValue.toLowerCase()))\n                                        .map((item) => (\n                                            <li\n                                                className=\"search-field-results\"\n                                                {...getItemProps({ key: item.id, item })}>\n                                                {`${item.id} - ${item.name}`}\n                                            </li>))\n                                        : null}\n                                </ul>\n                            </div>\n                        )}\n                    </Downshift>\n\n\n                    <label> Devedor </label>\n                    <Downshift inputValue={clientName} onChange={selection => {\n                        setClient(selection.id)\n                        setClientName(selection.name)\n                        setClients(selection)\n                    }}\n                        itemToString={item => (item ? item.name : '')}>\n                        {({ getInputProps, getItemProps, getMenuProps, isOpen, inputValue, getRootProps }) => (\n                            <div>\n                                <div {...getRootProps({}, { suppressRefError: true })} className=\"inline\">\n                                    <input value={client} type=\"number\" readOnly style={{ width: 80, marginRight: 5 }} />\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Pesquisa\"\n                                        value={clientName}\n                                        onChangeCapture={async e => {\n                                            setClientName(e.target.value)\n                                            if (!e.target.value || e.target.value.length < 3) return;\n                                            const { data } = await api.get(`clients/find-by-name/${String(e.target.value).normalize(\"NFD\")}`);\n                                            setClients(data);\n                                        }}\n                                        {...getInputProps()} />\n                                </div>\n                                <ul {...getMenuProps({})}>\n                                    {isOpen ? clients\n                                        .filter(item => !inputValue || item.name.toLowerCase().includes(inputValue.toLowerCase()))\n                                        .map((item) => (\n                                            <li\n                                                className=\"search-field-results\"\n                                                {...getItemProps({ key: item.id, item })}>\n                                                {`${item.id} - ${item.name}`}\n                                            </li>))\n                                        : null}\n                                </ul>\n                            </div>\n                        )}\n                    </Downshift>\n\n                    <div className=\"inline\">\n                        <div style={{ marginRight: 10 }}>\n                            <label> Dt. Vencimento </label>\n                            <CurrencyFormat\n                                format=\"##/##/####\"\n                                placeholder=\"Data de vencimento\"\n                                value={dtMaturity ? dtMaturity : ''}\n                                onValueChange={e => setDtMaturity(e.formattedValue)}\n                                onBlur={calculate} />\n                        </div>\n                        <div>\n                            <label> Dias em atraso </label>\n                            <input\n                                type=\"number\"\n                                placeholder=\"Dias\"\n                                value={days}\n                                readOnly />\n                        </div>\n                    </div>\n\n                    <label> Status </label>\n                    <select\n                        className=\"select-search\"\n                        onChange={e => setStatus(e.target.value)}>\n                        <option value=\"Aberto\" selected={status === 'Aberto' ? true : false}>Aberto</option>\n                        <option value=\"Negociado\" selected={status === 'Negociado' ? true : false}>Negociado</option>\n                        <option value=\"Liquidado\" selected={status === 'Liquidado' ? true : false}>Liquidado</option>\n                    </select>\n\n                    <label> Nota fiscal </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Nota fiscal\"\n                        value={document}\n                        onChange={e => setDocument(e.target.value)}\n                        onBlur={calculate} />\n\n                    <label> Modalidade de Faturamento </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Conta\"\n                        value={account}\n                        onChange={e => setAccount(e.target.value)}\n                        onBlur={calculate} />\n\n\n                    <label> R$ Valor Originário </label>\n                    <CurrencyInput\n                        prefix=\"R$ \"\n                        placeholder=\"Valor Originário\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={value ? value : ''}\n                        onChange={e => setValue(e)}\n                        onBlur={calculate} />\n\n                    <label> R$ Multa </label>\n                    <CurrencyInput\n                        prefix=\"R$ \"\n                        placeholder=\"Multa\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={penaltyCalculed ? penaltyCalculed : ''}\n                        onChange={e => setPenaltyCalculed(e)}\n                        readOnly />\n\n                    <label> R$ Juros </label>\n                    <CurrencyInput\n                        prefix=\"R$ \"\n                        placeholder=\"Juros\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={interestCalculed ? interestCalculed : ''}\n                        onChange={e => setInterestCalculed(e)}\n                        readOnly />\n\n                    <div className=\"inline\">\n                        <div style={{ width: 200, marginRight: 5 }}>\n                            <label> % Honorários </label>\n                            <CurrencyInput\n                                prefix=\"% \"\n                                placeholder=\"Honorários\"\n                                decimalSeparator=\",\"\n                                groupSeparator=\".\"\n                                value={honoraryPer ? honoraryPer : ''}\n                                onChange={e => setHonoraryPer(e)}\n                                onBlur={calculate} />\n                        </div>\n                        <div>\n\n                            <label> R$ Honorários </label>\n                            <CurrencyInput\n                                prefix=\"R$ \"\n                                placeholder=\"Honorários \"\n                                decimalSeparator=\",\"\n                                groupSeparator=\".\"\n                                value={honoraryCalculed ? honoraryCalculed : ''}\n                                onChange={e => setHonoraryCalculed(e)}\n                                readOnly />\n                        </div>\n\n                    </div>\n\n                    <label> R$ Débito Atualizado </label>\n                    <div className=\"inline\">\n                        <CurrencyInput\n                            prefix=\"R$ \"\n                            placeholder=\"Débito Atualizado\"\n                            decimalSeparator=\",\"\n                            groupSeparator=\".\"\n                            value={updatedDebt ? updatedDebt : ''}\n                            onChange={e => setUpdatedDebt(e)}\n                            readOnly />\n                        <button\n                            style={{ marginLeft: 5, width: 'auto' }}\n                            onClick={calculate}> Atualizar </button>\n                    </div>\n\n                    <label> R$ Desconto Máximo </label>\n                    <CurrencyInput\n                        prefix=\"R$ \"\n                        placeholder=\"Desconto Máximo\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={maximumDiscount ? maximumDiscount : ''}\n                        onChange={e => setMaximumDiscount(e)} />\n\n                    <label> R$ Valor Negociado </label>\n                    <CurrencyInput\n                        prefix=\"R$ \"\n                        placeholder=\"Valor Negociado\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={negotiatedValue}\n                        onChange={e => setNegotiatedValue(e)}\n                        readOnly\n                        onBlur={() => {\n                            if (parseFloat(negotiatedValue ? negotiatedValue : '0') < parseFloat(maximumDiscount ? maximumDiscount : '0')) {\n                                setNegotiatedValue('')\n                            }\n                        }} />\n\n                    <label> Observação </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Observações\"\n                        value={obs}\n                        onChange={e => setObs(e.target.value)} />\n\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={() => setShow(false)} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n            <div className=\"fab-container\">\n                <button onClick={() => setNew()}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Client);","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport * as XLSX from 'xlsx';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport { connect } from 'react-redux';\nimport moment, { now } from 'moment';\nimport './style.css';\nimport api from '../../services/api';\nimport { strValueToFloat, floatValueToStr, configSheetStr } from '../../helpers/myFormat';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport AppBar from '../../components/AppBar';\n\nfunction ImportCollects(props) {\n    const history = useHistory();\n    const sheetFile = React.useRef()\n    const [importedArray, setImportedArray] = useState([])\n    const [companies, setCompanies] = useState([]);\n    const [companieId, setCompanieId] = useState(0);\n\n\n    useEffect(() => {\n        loadCompanies();\n    }, []);\n\n    const loadCompanies = async () => {\n        const res = await api.get('companies');\n        if (res.data.length > 0) {\n            setCompanies(res.data);\n            setCompanieId(res.data[0].id)\n        }\n    }\n\n    const configStrTelephone = tel => {\n        if (!tel)\n            return ''\n        var telFormated = tel + '';\n        telFormated = telFormated.toString();\n        telFormated = telFormated.replace(/[^\\d]+/g, '');\n        if (telFormated.substring(0, 2) !== '55')\n            telFormated = '55' + telFormated;\n        return telFormated;\n    }\n\n    const insetOne = async register => {\n        const data = {\n            status: 'Aberto',\n            companie: companieId,\n            client: register.NOME_CLIENTE,\n            cellphone: register.FONE_1 ? register.FONE_1 : register.FONE_2,\n            phone: register.FONE_2 ? register.FONE_2 : register.FONE_3,\n            dt_maturity: register.DT_VENC,\n            maximum_discount: register.DESC_MAX,\n            value: register.VLR_ORIGINARIO,\n        }\n        api.post('collects/import-collect', data);\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const registerOnBackend = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        \n        for (var reg of importedArray) {\n            await sleep(100).then(() => {\n                insetOne(reg)\n            });\n        }\n        props.dispatch(loadingActions.setLoading(false));\n\n        props.dispatch(toastActions.setToast(true, 'success', 'Todos os registros foram importados!'));\n    }\n\n    const readFile = async sheet => {\n        props.dispatch(loadingActions.setLoading(true));\n        var f = sheet.current.files[0]\n        var reader = await new FileReader();\n        await reader.readAsArrayBuffer(f);\n        reader.onload = async e => {\n            var data = await new Uint8Array(reader.result);\n            var wb = await XLSX.read(data, { type: \"array\" });\n            data = new Uint8Array(data);\n            var arr = [];\n            for (var i = 0; i !== data.length; ++i) {\n                arr[i] = String.fromCharCode(data[i]);\n            }\n            var bstr = arr.join(\"\");\n            var workbook = XLSX.read(bstr, { type: \"binary\" })\n            var first_sheet_name = workbook.SheetNames[0];\n            var worksheet = workbook.Sheets[first_sheet_name];\n            var xlsxJSON = await (XLSX.utils.sheet_to_json(worksheet, { raw: false }));\n            var tempArray = [];\n            for (var json of xlsxJSON) {\n                json.FONE_1 = await configStrTelephone(json.FONE_1);\n                json.FONE_2 = await configStrTelephone(json.FONE_1);\n                json.FONE_3 = await configStrTelephone(json.FONE_1);\n                json.DT_VENC = await moment(json.DT_VENC).format('DD/MM/YYYY')\n                json.VLR_ORIGINARIO = await configSheetStr(json.VLR_ORIGINARIO)\n                json.DESC_MAX = await configSheetStr(json.DESC_MAX)\n                tempArray.push(json);\n            }\n            setImportedArray(tempArray);\n            props.dispatch(loadingActions.setLoading(false));\n        }\n    }\n\n    return (\n        <div>\n            <AppBar />\n            <div className=\"import-collet-container\">\n                <div className=\"form\">\n                    <select\n                        onChange={(e) => setCompanieId(e.target.value)}\n                        className=\"select-client\">\n                        {companies.map(comp => (\n                            <option key={comp.id} value={comp.id}> {comp.name}</option>\n                        ))}\n                    </select>\n                    <label htmlFor={companieId > 0 ? \"file-upload\" : \"\"} className=\"custom-file-upload\">\n                        Carregar arquivo\n                    </label>\n                    <input id=\"file-upload\" type=\"file\" ref={sheetFile} onChange={() => readFile(sheetFile)} />\n                    <button\n                        disabled={(!importedArray.length > 0)}\n                        className=\"import-button\"\n                        onClick={registerOnBackend} >\n                        Importar\n                    </button>\n                </div>\n                <MDBTable responsive hover bordered>\n                    <MDBTableHead>\n                        <tr>\n                            <th>Cliente</th>\n                            <th>Telefone 1</th>\n                            <th>Telefone 2</th>\n                            <th>Telefone 3</th>\n                            <th>Dt. Venc.</th>\n                            <th>Vlr. Originário</th>\n                            <th>Desconto Max.</th>\n                        </tr>\n                    </MDBTableHead>\n                    <MDBTableBody>\n                        {importedArray.map(collect => (\n                            <tr key={collect.__rowNum__}>\n                                <td>{collect.NOME_CLIENTE}</td>\n                                <td>{collect.FONE_1}</td>\n                                <td>{collect.FONE_2}</td>\n                                <td>{collect.FONE_3}</td>\n                                <td>{collect.DT_VENC}</td>\n                                <td>{collect.VLR_ORIGINARIO}</td>\n                                <td>{collect.DESC_MAX}</td>\n                            </tr>\n                        ))}\n                    </MDBTableBody>\n                </MDBTable>\n            </div>\n        </div >\n    );\n}\n\nexport default connect(state => ({ state }))(ImportCollects);","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport CurrencyFormat from 'react-currency-format';\nimport CurrencyInput from 'react-currency-input-field';\nimport './style.css';\nimport myFormat from '../../helpers/myFormat';\nimport api from '../../services/api';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport AppBar from '../../components/AppBar';\n\n\nfunction Companie(props) {\n    const history = useHistory();\n    const [show, setShow] = useState(false);\n    const [search, setSearch] = useState([]);\n    const [searchField, setSearchField] = useState([]);\n    const [registers, setRegisters] = useState([]);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    const [name, setName] = useState('');\n    const [cnpj, setCnpj] = useState('');\n    const [edress, setEdress] = useState('');\n    const [phone, setPhone] = useState('');\n    const [responsibleStaff, setResponsibleStaff] = useState('');\n    const [dtContract, setDtContract] = useState('');\n    const [dtRenovation, setDtRenovation] = useState('');\n    const [defaultInterest, setDefaultInterest] = useState('');\n    const [defaultHonorary, setDefaultHonorary] = useState('');\n    const [defaultPenalty, setDefaultPenalty] = useState('');\n    const [monthlyValue, setMonthlyValue] = useState('');\n    const [payday, setPayDay] = useState('');\n    const [paymentType, setPaymentType] = useState('');\n    const [obs, setObs] = useState('');\n\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const handleSubmit = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n\n        //VALIDAÇÕES\n        if (!name) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n\n        //CRIA OBJETO PARAR CADASTRAR/ALTERAR\n        const regTemp = {\n            name,\n            cnpj,\n            edress,\n            phone,\n            responsible_staff: responsibleStaff,\n            dt_contract: dtContract,\n            dt_renovation: dtRenovation,\n            default_interest: defaultInterest,\n            default_honorary: defaultHonorary,\n            default_penalty: defaultPenalty,\n            monthly_value: monthlyValue,\n            payday: payday,\n            payment_type: paymentType,\n            obs,\n        }\n\n        setRegister(regTemp);\n\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`companies/${register.id}`, regTemp)\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //CADASTRO\n                const res = await api.post('companies', regTemp);\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`companies/${register.id}`);\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            loadRegisters();\n            setShow(false)\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('companies')\n            setRegisters(res.data);\n            setSearch(res.data)\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        tempSearch = registers.filter(find =>\n            find.name.toLowerCase().indexOf(String(searchField).toLowerCase()) > -1\n        )\n        setSearch(tempSearch)\n    }\n\n    const clearValues = () => {\n        setName('')\n    }\n\n\n    const setUpdating = (reg) => {\n        setIsUpdating(true);\n        setRegister(reg);\n        setName(reg.name);\n        setCnpj(reg.cnpj);\n        setEdress(reg.edress);\n        setPhone(reg.phone);\n        setResponsibleStaff(reg.responsible_staff);\n        setDtContract(reg.dt_contract);\n        setDtRenovation(reg.dt_renovation);\n        setDefaultInterest(reg.default_interest);\n        setDefaultHonorary(reg.default_honorary);\n        setDefaultPenalty(reg.default_penalty);\n        setMonthlyValue(reg.monthly_value);\n        setPayDay(reg.payday);\n        setPaymentType(reg.payment_type);\n\n        setObs(reg.obs);\n        setShow(true);\n    }\n\n    const hide = async (reg) => {\n        setShow(false);\n        setRegister({});\n        setName('');\n        setName('');\n        setCnpj('');\n        setEdress('');\n        setPhone('');\n        setResponsibleStaff('');\n        setDtContract('');\n        setDtRenovation('');\n        setDefaultInterest('');\n        setDefaultHonorary('');\n        setDefaultPenalty('');\n        setMonthlyValue('');\n        setPayDay('');\n        setPaymentType('');\n        setObs('');\n        setIsUpdating(false);\n    }\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n    return (\n        <div className=\"companie-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <label> Nome: </label>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n            </div>\n\n            <MDBTable responsive hover bordered className=\"table\">\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Razão Social</th>\n                        <th>Observação</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => setUpdating(reg)}\n                            key={reg.id}>\n                            <td>{reg.id}</td>\n                            <td>{reg.name}</td>\n                            <td>{reg.obs}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title>Cadastro de Credor</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        register.id ?\n                            <div>\n                                <label> Código </label>\n                                <label> {': ' + register.id} </label>\n                                <br />\n                            </div>\n                            : ''\n                    }\n                    <label> Razão Social </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Razão Social\"\n                        value={name}\n                        onChange={e => setName(e.target.value)} />\n\n                    <label> CNPJ </label>\n                    <CurrencyFormat\n                        format=\"##.###.###/####-##\"\n                        placeholder=\"CNPJ\"\n                        value={cnpj ? cnpj : ''}\n                        onValueChange={e => setCnpj(e.value)} />\n\n                    <label> Endereço </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Endereço\"\n                        value={edress}\n                        onChange={e => setEdress(e.target.value)} />\n\n                    <label> Telefone </label>\n                    <CurrencyFormat\n                        format=\"## (##) #########\"\n                        placeholder=\"Telefone\"\n                        value={phone ? phone : ''}\n                        onValueChange={e => setPhone(e.value)} />\n\n                    <label> Pessoa Responsável </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Pessoa Responsável\"\n                        value={responsibleStaff}\n                        onChange={e => setResponsibleStaff(e.target.value)} />\n\n\n                    <label> Data de início de contrato </label>\n                    <CurrencyFormat\n                        format=\"##/##/####\"\n                        placeholder=\"Data do contrato\"\n                        value={dtContract ? dtContract : ''}\n                        onValueChange={e => setDtContract(e.value)} />\n\n                    <label> Prazo para renovação </label>\n                    <CurrencyFormat\n                        format=\"##/##/####\"\n                        placeholder=\"Data de renovação\"\n                        value={dtRenovation ? dtRenovation : ''}\n                        onValueChange={e => setDtRenovation(e.value)} />\n\n                    <label> R$ Valor da Mensalidade </label>\n                    <CurrencyInput\n                        placeholder=\"Valor da Mensalidade\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={monthlyValue?monthlyValue:''}\n                        onChange={e => setMonthlyValue(e)}/>\n\n                    <label> % Juros Diário </label>\n                    <CurrencyInput\n                        placeholder=\"Juros \"\n                        decimalsLimit={3}\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={defaultInterest?defaultInterest:''}\n                        onChange={e => setDefaultInterest(e)}/>\n\n                    <label> % Honorários padrão </label>\n                    <CurrencyInput\n                        placeholder=\"Honorários Padrão\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={defaultHonorary?defaultHonorary:''}\n                        onChange={e => setDefaultHonorary(e)}/>\n\n                    <label> % Multa </label>\n                    <CurrencyInput\n                        placeholder=\"Honorários Padrão\"\n                        decimalSeparator=\",\"\n                        groupSeparator=\".\"\n                        value={defaultPenalty?defaultPenalty:''}\n                        onChange={e => setDefaultPenalty(e)}/>\n\n                    <label> Data de Pagamento </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Data de Pagamento\"\n                        value={payday}\n                        onChange={e => setPayDay(e.target.value)} />\n\n                    <label> Modalidade de Pagamento </label>\n                    <select\n                        className=\"select-search\"\n                        onChange={e => setPaymentType(e.target.value)}>\n                        <option value=\"Permuta\" selected={paymentType === 'Permuta' ? true : false}>Permuta</option>\n                        <option value=\"Sem mensalidade\" selected={paymentType === 'Sem mensalidade' ? true : false}>Sem mensalidade</option>\n                        <option value=\"Dinheiro\" selected={paymentType === 'Dinheiro' ? true : false}>Dinheiro</option>\n                    </select>\n\n                    <label> Obs </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Observação\"\n                        value={obs}\n                        onChange={e => setObs(e.target.value)} />\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={() => setShow(false)} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n\n            <div className=\"fab-container\">\n                <button onClick={setNew}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Companie);","import React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal, Tabs, Tab, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport moment from 'moment';\nimport CurrencyFormat from 'react-currency-format';\nimport CurrencyInput from 'react-currency-input-field';\nimport Downshift from 'downshift'\nimport './style.css';\nimport { floatValueToStr, strValueToFloat } from '../../helpers/myFormat';\nimport api from '../../services/api';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport * as callbackActions from '../../store/actions/callback';\nimport AppBar from '../../components/AppBar';\n\n\nfunction Attendance(props) {\n    const history = useHistory();\n    const [grandMaximumDiscount, setGrandMaximumDiscount] = useState(0);\n\n    const [show, setShow] = useState(false);\n    const [search, setSearch] = useState([]);\n    const [searchField, setSearchField] = useState([]);\n    const [registers, setRegisters] = useState([]);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    //ATTEDANCE FIELDS\n    const [clients, setClients] = useState([]);\n    const [aClient, setAClient] = useState('');\n    const [aClientName, setAClientName] = useState('');\n    const [aUser, setAUser] = useState(localStorage.getItem('@sg/user/id'));\n    const [aUserName, setAUserName] = useState(localStorage.getItem('@sg/user/name'));\n    const [aDtBegin, setADtBegin] = useState('');\n    const [aDtEnd, setADtEnd] = useState('');\n    const [aDescription, setADescription] = useState('');\n    const [aStatus, setAStatus] = useState('Não Negociado')\n    const [aNegotiatedValue, setANegotiatedValue] = useState('');\n    const [aGrandValue, setAGrandValue] = useState('');\n    const [aObs, setAObs] = useState('');\n\n\n    //CLIENT FIELDS\n    const [cliClient, setCliClient] = useState({});\n    const [cliId, setCliId] = useState('');\n    const [cliCode, setCliCode] = useState('');\n    const [cliPhoneAdditional, setCliPhoneAdditional] = useState('');\n    const [cliEmailAdditional, setCliEmailAdditional] = useState('');\n    const [cliEdressAdditional, setCliEdressAdditional] = useState('');\n    const [cliName, setCliName] = useState('');\n    const [cliCellphone, setCliCellphone] = useState('');\n    const [cliPhone, setCliPhone] = useState('');\n    const [cliCompanie, setCliCompanie] = useState('');\n    const [cliCompanieName, setCliCompanieName] = useState('');\n    const [cliEmail, setCliEmail] = useState('');\n    const [cliAttendance, setCliAttendance] = useState('');\n    const [cliDocumentType, setCliDocumentType] = useState('CPF');\n    const [cliDocument, setCliDocument] = useState('');\n    const [cliEdress, setCliEdress] = useState('');\n    const [cliObs, setCliObs] = useState('');\n\n    //COLLECTS FIELDS\n    const [cCollect, setCCollect] = useState({});\n    const [cCollects, setCCollects] = useState([]);\n    const [dataSource, setDataSource] = useState([]);\n    const [cCode, setCCode] = useState('');\n    const [cClient, setCClient] = useState('');\n    const [cClientName, setCClientName] = useState('');\n    const [cStatus, setCStatus] = useState('Aberto');\n    const [cCompanie, setCCompanie] = useState('');\n    const [cCompanieName, setCCompanieName] = useState('');\n    const [cAccount, setCAccount] = useState('');\n    const [cDocument, setCDocument] = useState('');\n    const [cDtMaturity, setCDtMaturity] = useState('');\n    const [cDays, setCDays] = useState(0);\n    const [cValue, setCValue] = useState(0);\n    const [cAmount, setCAmount] = useState(0);\n    const [cPenalty, setCPenalty] = useState(0);\n    const [cInterest, setCInterest] = useState(0);\n    const [cUpdatedDebt, setCUpdatedDebt] = useState(0);\n    const [cHonorary, setCHonorary] = useState(0);\n    const [cMaximumDiscount, setCMaximumDiscount] = useState(0);\n    const [cNegotiatedValue, setCNegotiatedValue] = useState(0);\n    const [cObs, setCObs] = useState('');\n\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const handleSubmit = async () => {\n\n        props.dispatch(loadingActions.setLoading(true));\n\n        setADtEnd(moment().format('L LT'))\n        const regTemp = {\n            client: aClient,\n            dt_begin: aDtBegin,\n            dt_end: moment().format('L LT'),\n            user: aUser,\n            description: aDescription,\n            negotiated_value: aNegotiatedValue,\n            grand_value: aGrandValue,\n            status: aStatus,\n            obs: aObs\n        }\n        setRegister(regTemp);\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`attendances/${register.id}`, regTemp)\n                await updateClient();\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                setIsUpdating(false);\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //VALIDAÇÕES\n                if (aObs.length < 10) {\n                    props.dispatch(loadingActions.setLoading(false));\n                    props.dispatch(toastActions.setToast(true, 'success', 'O campo OBSERVAÇÃO é obrigatório.'));\n                    return\n                }\n\n                if (aStatus === 'Negociado') {\n\n                    if (grandMaximumDiscount === 0) {\n                        if (strValueToFloat(aNegotiatedValue) < aGrandValue) {\n                            props.dispatch(loadingActions.setLoading(false));\n                            props.dispatch(toastActions.setToast(true, 'success', 'O VALOR NEGOCIADO deve ser o mesmo que o DÉBITO TOTAL!'));\n                            return 0\n                        }\n                    } else {\n                        if (strValueToFloat(aNegotiatedValue) < grandMaximumDiscount) {\n                            props.dispatch(loadingActions.setLoading(false));\n                            props.dispatch(toastActions.setToast(true, 'success', 'O VALOR NEGOCIADO não pode ser menor que o DESCONTO MÁXIMO!'));\n                            return 0\n                        }\n                    }\n                } else {\n                    setANegotiatedValue('0')\n                }\n\n                //CADASTRO\n                const res = await api.post('attendances', regTemp);\n\n                if (aStatus === 'Negociado')\n                    await closeCollectsByClient(aClient, res.data[0]);\n\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                setIsUpdating(false);\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`attendances/${register.id}`);\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            loadRegisters();\n            setShow(false)\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('attendances');\n            setRegisters(res.data);\n            setSearch(res.data)\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n            props.dispatch(loadingActions.setLoading(false));\n        }\n    }\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        tempSearch = registers.filter(find =>\n            find.client.toLowerCase().indexOf(String(searchField).toLowerCase()) > -1\n        )\n        setSearch(tempSearch)\n    }\n\n\n    const getCollectsByAttendanceId = async attendanceId => {\n        try {\n            const res = await api.get('/collects/find-by-attendance/' + attendanceId);\n            var tempGrandMaximumDiscount = 0;\n            var tempAGrandValue = 0;\n            res.data.map(collect => {\n                tempGrandMaximumDiscount = tempGrandMaximumDiscount + strValueToFloat(collect.maximum_discount)\n                tempAGrandValue = tempAGrandValue + strValueToFloat(collect.updated_debt);\n            })\n            setGrandMaximumDiscount(tempGrandMaximumDiscount);\n            if (tempAGrandValue > 0)\n                setAGrandValue(floatValueToStr(tempAGrandValue));\n\n            setCCollects(res.data)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    const getCollectsByClientId = async cliId => {\n        try {\n            const res = await api.get('/collects/find-by-client/' + cliId);\n            var tempGrandMaximumDiscount = 0;\n            var tempAGrandValue = 0;\n            res.data.map(collect => {\n                tempGrandMaximumDiscount = tempGrandMaximumDiscount + strValueToFloat(collect.maximum_discount)\n                tempAGrandValue = tempAGrandValue + strValueToFloat(collect.updated_debt);\n            })\n            setGrandMaximumDiscount(tempGrandMaximumDiscount);\n            if (tempAGrandValue > 0)\n                setAGrandValue(floatValueToStr(tempAGrandValue));\n\n            setCCollects(res.data)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n\n    const clearValues = () => {\n        //CLEAR ATTENDENCE\n        setAClient('');\n        setAClientName('');\n        setAUser(localStorage.getItem('@sg/user/id'));\n        setAUserName(localStorage.getItem('@sg/user/name'))\n        setADescription('');\n        setAStatus('Não Negociado');\n        setADtBegin(moment().format('L LT'));\n        setADtEnd('');\n        setANegotiatedValue('');\n        setAGrandValue('');\n        setAObs('');\n\n        //CLEAR CLIENTE\n        setCliClient({});\n        setCliId('');\n        setCliName('');\n        setCliCompanie('');\n        setCliCompanieName('');\n        setCliCellphone('');\n        setCliPhoneAdditional('');\n        setCliPhone('');\n        setCliEmail('');\n        setCliEmailAdditional('');\n        setCliEdress('');\n        setCliAttendance('');\n        setCliEdressAdditional('');\n        setCliDocumentType('CPF')\n        setCliDocument('');\n        setCliObs('');\n    }\n\n    const setClientValues = async (client) => {\n        setCliClient(client);\n        setCliId(client.id);\n        setCliName(client.name);\n        setCliCompanie(client.companie);\n        setCliCompanieName(client.companie_name);\n        setCliCellphone(client.cellphone);\n        setCliPhoneAdditional(client.phone_additional);\n        setCliPhone(client.phone);\n        setCliEmail(client.email);\n        setCliEmailAdditional(client.email_additional);\n        setCliEdress(client.edress);\n        setCliAttendance(client.attendance);\n        setCliEdressAdditional(client.edress_additional);\n        setCliDocumentType(client.document_type)\n        setCliDocument(client.document);\n        setCliObs(client.obs);\n        await getCollectsByClientId(client.id)\n    }\n\n\n    const setUpdating = async (reg) => {\n        setIsUpdating(true);\n        setRegister(reg);\n        setAClient(reg.client);\n        setAClientName(reg.client_name);\n        setAUser(reg.user);\n        setADescription(reg.description);\n        setAStatus(reg.status)\n        setAObs(reg.obs);\n        setADtBegin(reg.dt_begin);\n        setANegotiatedValue(reg.negotiated_value)\n        setAGrandValue(reg.grand_value)\n        setADtEnd(reg.dt_end);\n\n        //LOAD CLIENT\n        if (reg.client) {\n            const res = await api.get(`clients/find-by-id/${reg.client}`);\n            setAClientName(res.data.name)\n            setClientValues(res.data)\n            // GET COLLECTS\n            await getCollectsByAttendanceId(reg.id)\n        }\n\n        setShow(true);\n    }\n\n\n    const hide = async (reg) => {\n        setShow(false);\n        setRegister({});\n        clearValues();\n        setIsUpdating(false);\n    }\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n\n    const updateClient = async () => {\n        try {\n            const regTemp = {\n                code: cliCode,\n                name: cliName,\n                cellphone: cliCellphone,\n                phone: cliPhone,\n                companie: cliCompanie,\n                edress_additional: cliEdressAdditional,\n                email_additional: cliEmailAdditional,\n                phone_additional: cliPhoneAdditional,\n                email: cliEmail,\n                edress: cliEdress,\n                document_type: cliDocumentType,\n                document: cliDocument,\n                obs: cliObs\n            }\n            const res = await api.put(`clients/${cliId}`, regTemp)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n\n\n    const closeCollectsByClient = async (clientId, attendanceId) => {\n        const res = await api.get(`collects/close-by-client/${clientId}/${attendanceId}`);\n    }\n\n    return (\n        <div className=\"attendance-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <label> Cliente: </label>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n            </div>\n\n            <MDBTable responsive hover bordered className=\"table\">\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Início</th>\n                        <th>Fim</th>\n                        <th>Usuário</th>\n                        <th>Cliente</th>\n                        <th>Valor Total</th>\n                        <th>Status</th>\n                        <th>Valor negociado</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr key={reg.id}\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => setUpdating(reg)}>\n                            <td>{reg.id}</td>\n                            <td>{reg.dt_begin}</td>\n                            <td>{reg.dt_end}</td>\n                            <td>{reg.user + ' - ' + reg.user_name}</td>\n                            <td>{reg.client + ' - ' + reg.client_name}</td>\n                            <td>{strValueToFloat(reg.grand_value).toLocaleString()}</td>\n                            <td>{reg.status}</td>\n                            <td>{strValueToFloat(reg.negotiated_value).toLocaleString()}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title> Atendimento </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Tabs defaultActiveKey=\"attendance\" id=\"uncontrolled-tab-example\">\n                        <Tab eventKey=\"attendance\" title=\"Atendimento\">\n                            {\n                                register.id ?\n                                    <div>\n                                        <br />\n                                        <label> Código </label>\n                                        <label> {': ' + register.id} </label>\n                                        <br />\n                                    </div>\n                                    : ''\n                            }\n                            <label> Usuário </label>\n                            <div className=\"inline\">\n                                <input\n                                    style={{ width: 80, marginRight: 5 }}\n                                    type=\"text\"\n                                    placeholder=\"Cód.\"\n                                    value={aUser}\n                                    readOnly />\n                                <input\n                                    type=\"text\"\n                                    readOnly\n                                    value={aUserName} />\n                                <br />\n                            </div>\n\n                            <label> Dt. Início </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Dt. Início\"\n                                readOnly\n                                value={aDtBegin} />\n                            <label> Dt. Fim </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Dt. Início\"\n                                readOnly\n                                value={aDtEnd} />\n\n                            <label> Observações </label>\n                            <textarea\n                                placeholder=\"Descreva como foi o atendimento\"\n                                onChange={e => setAObs(e.target.value)}>\n                                {aObs}\n                            </textarea>\n                        </Tab>\n\n                        <Tab eventKey=\"client\" title=\"Cliente\">\n                            <label> Devedor </label>\n                            <Downshift inputValue={aClientName} inputValue={aClientName} onChange={selection => {\n                                setAClient(selection.id)\n                                setAClientName(selection.name)\n                                setClientValues(selection)\n                            }}\n                                itemToString={item => (item ? item.name : '')}>\n                                {({ getInputProps, getItemProps, getMenuProps, isOpen, inputValue, getRootProps }) => (\n                                    <div>\n                                        <div {...getRootProps({}, { suppressRefError: true })} className=\"inline\">\n                                            <input value={aClient} type=\"number\" readOnly style={{ width: 80, marginRight: 5 }} />\n                                            <input\n                                                type=\"text\"\n                                                placeholder=\"Pesquisa\"\n                                                readOnly={isUpdating}\n                                                value={aClientName}\n                                                onChangeCapture={async e => {\n                                                    setAClientName(e.target.value)\n                                                    if (!e.target.value || e.target.value.length < 3) return;\n                                                    const { data } = await api.get(`clients/find-by-name/${e.target.value}`);\n                                                    setClients(data);\n                                                }}\n                                                {...getInputProps()} />\n                                        </div>\n                                        <ul {...getMenuProps({})}>\n                                            {isOpen ? clients\n                                                .filter(item => !inputValue || item.name.toLowerCase().includes(inputValue.toLowerCase()))\n                                                .map((item) => (\n                                                    <li\n                                                        className=\"search-field-results\"\n                                                        {...getItemProps({ key: item.id, item })}>\n                                                        {`${item.id} - ${item.name}`}\n                                                    </li>))\n                                                : null}\n                                        </ul>\n                                    </div>\n                                )}\n                            </Downshift>\n\n\n                            <label> Credor </label>\n                            <div className=\"inline\">\n                                <input\n                                    style={{ width: 80, marginRight: 5 }}\n                                    type=\"text\"\n                                    placeholder=\"Credor\"\n                                    value={cliCompanie}\n                                    readOnly />\n                                <input\n                                    type=\"text\"\n                                    readOnly\n                                    value={cliCompanieName} />\n                                <br />\n                            </div>\n\n                            <label> Código </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Código\"\n                                readOnly\n                                value={cliCode} />\n\n                            <label> Nome </label>\n                            <input\n                                type=\"text\"\n                                readOnly\n                                placeholder=\"Nome\"\n                                value={cliName} />\n\n                            <label> Celular </label>\n                            <CurrencyFormat\n                                format=\"## (##) #####-####\"\n                                placeholder=\"Celular\"\n                                readOnly\n                                value={cliCellphone ? cliCellphone : ''} />\n\n                            <label> Telefone </label>\n                            <CurrencyFormat\n                                format=\"## (##) #########\"\n                                placeholder=\"Telefone\"\n                                readOnly\n                                value={cliPhone ? cliPhone : ''} />\n\n                            <label> Telefone adicional </label>\n                            <CurrencyFormat\n                                format=\"## (##) #########\"\n                                placeholder=\"Telefone\"\n                                value={cliPhoneAdditional ? cliPhoneAdditional : ''}\n                                onValueChange={e => setCliPhoneAdditional(e.value)} />\n\n                            <label> Email </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Email\"\n                                readOnly\n                                value={cliEmail} />\n\n                            <label> Email adicional </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Email adicional\"\n                                value={cliEmailAdditional}\n                                onChange={e => setCliEmailAdditional(e.target.value)} />\n\n                            <div className=\"inline\">\n                                <div style={{ marginRight: 5 }}>\n                                    <label> Tipo de Cliente </label>\n                                    <select\n                                        className=\"select-search\"\n                                        onChange={e => setCliDocumentType(e.target.value)}>\n                                        <option value=\"CPF\" selected={cliDocumentType === 'CPF' ? true : false}>CPF</option>\n                                        <option value=\"CNPJ\" selected={cliDocumentType === 'CNPJ' ? true : false}>CNPJ</option>\n                                    </select>\n                                </div>\n                                <div>\n                                    <label> {cliDocumentType} </label>\n                                    <CurrencyFormat\n                                        format={cliDocumentType === 'CPF' ? \"###.###.###-##\" : \"###.###.###/###-##\"}\n                                        placeholder={cliDocumentType}\n                                        value={cliDocument ? cliDocument : ''}\n                                        onValueChange={e => setCliDocument(e.value)} />\n                                </div>\n                            </div>\n\n                            <label>  Endereço </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Endereço\"\n                                readOnly\n                                value={cliEdress} />\n\n                            <label>  Endereço adicional </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Endereço\"\n                                value={cliEdressAdditional}\n                                onChange={e => setCliEdressAdditional(e.target.value)} />\n\n                            <label>  Observações </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Observações do cliente\"\n                                readOnly\n                                value={cliObs} />\n                        </Tab>\n\n                        <Tab eventKey=\"collect\" title=\"Cobranças\">\n                            <MDBTable responsive hover bordered className=\"table\">\n                                <MDBTableHead>\n                                    <tr>\n                                        <th>Código</th>\n                                        <th>Status</th>\n                                        <th>Dias em Atraso</th>\n                                        <th>Vlr. Originário</th>\n                                        <th>Débito Atualizado</th>\n                                    </tr>\n                                </MDBTableHead>\n                                <MDBTableBody>\n                                    {cCollects.map(collect => (\n                                        <tr key={collect.id}>\n                                            <td>{collect.id}</td>\n                                            <td>{collect.status}</td>\n                                            <td>{collect.days}</td>\n                                            <td>{collect.value}</td>\n                                            <td>{strValueToFloat(collect.updated_debt).toLocaleString()} </td>\n                                        </tr>\n                                    ))}\n                                </MDBTableBody>\n                            </MDBTable>\n\n\n                            <div className=\"negotiation\">\n                                <div className=\"inline\">\n                                    <div style={{ marginRight: 5 }}>\n                                        <label> Débito Total </label>\n                                        <CurrencyInput\n                                            prefix=\"R$ \"\n                                            placeholder=\"Débito total\"\n                                            decimalSeparator=\",\"\n                                            groupSeparator=\".\"\n                                            value={aGrandValue}\n                                            readOnly />\n                                    </div>\n                                    <div>\n                                        <label> Desconto Máximo Total </label>\n                                        <CurrencyInput\n                                            prefix=\"R$ \"\n                                            placeholder=\"Desconto Máximo\"\n                                            decimalSeparator=\",\"\n                                            groupSeparator=\".\"\n                                            precision=\"2\"\n                                            value={floatValueToStr(grandMaximumDiscount)}\n                                            readOnly />\n                                    </div>\n                                </div>\n                                <div className=\"inline\">\n                                    <div>\n                                        <label> Status </label>\n                                        <select\n                                            className=\"select-search\"\n                                            onChange={e => setAStatus(e.target.value)}\n                                            disabled={isUpdating}>\n                                            <option value=\"Não Negociado\" selected={aStatus === 'Não Negociado' ? true : false}>Não Negociado</option>\n                                            <option value=\"Negociado\" selected={aStatus === 'Negociado' ? true : false}>Negociado</option>\n                                        </select>\n                                    </div>\n                                    <div style={{ marginLeft: 5 }}>\n                                        <label> R$ Valor Negociado </label>\n                                        <CurrencyInput\n                                            prefix=\"R$ \"\n                                            placeholder=\"Valor Negociado\"\n                                            decimalSeparator=\",\"\n                                            groupSeparator=\".\"\n                                            precision=\"2\"\n                                            value={aNegotiatedValue ? aNegotiatedValue : ''}\n                                            onChange={e => setANegotiatedValue(e)}\n                                            readOnly={((isUpdating) || (aStatus !== 'Negociado'))} />\n                                    </div>\n                                </div>\n\n                            </div>\n                        </Tab>\n                    </Tabs>\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={hide} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n\n            <div className=\"fab-container\">\n                <button onClick={setNew}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Attendance);","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport './style.css';\n\nexport default function NotFound() {\n    const history = useHistory();\n    return (\n        <div className=\"not-found-container\">\n           <h1> Esta página não existe </h1>\n           <button onClick={()=> history.push('dashboard')}> Voltar </button>\n           \n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport Downshift from 'downshift';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport CurrencyFormat from 'react-currency-format';\n\nimport './style.css';\nimport api from '../../services/api';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport * as callbackActions from '../../store/actions/callback';\n\nimport AppBar from '../../components/AppBar';\n\n\nfunction Client(props) {\n    const history = useHistory();\n    const [show, setShow] = useState(false);\n    const [search, setSearch] = useState([]);\n    const [searchField, setSearchField] = useState([]);\n    const [registers, setRegisters] = useState([]);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [selectFilterField, setSelectFilterField] = useState('name')\n\n    const [code, setCode] = useState('')\n    const [name, setName] = useState('');\n    const [cellphone, setCellphone] = useState('');\n    const [phone, setPhone] = useState('');\n    const [phoneAdditional, setPhoneAdditional] = useState('');\n    const [emailAdditional, setEmailAdditional] = useState('');\n    const [edressAdditional, setEdressAdditional] = useState('');\n    const [companie, setCompanie] = useState('');\n    const [companieName, setCompanieName] = useState('');\n    const [companies, setCompanies] = useState([]);\n    const [email, setEmail] = useState('');\n    const [documentType, setDocumentType] = useState('CPF');\n    const [document, setDocument] = useState('');\n    const [edress, setEdress] = useState('');\n    const [obs, setObs] = useState('');\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('clients')\n            if (res.data.error) {\n                props.dispatch(loadingActions.setLoading(false));\n                props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + res.data.error));\n                return 0;\n            }\n            setRegisters(res.data);\n            setSearch(res.data)\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    const handleSubmit = async () => {\n        //VALIDAÇÕES\n        if (!name || !companieName) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n\n        props.dispatch(loadingActions.setLoading(true));\n        //CRIA OBJETO PARAR CADASTRAR/ALTERAR\n        const regTemp = {\n            code,\n            name,\n            cellphone,\n            phone,\n            companie,\n            edress_additional: edressAdditional,\n            email_additional: emailAdditional,\n            phone_additional: phoneAdditional,\n            email,\n            edress,\n            document_type: documentType,\n            document,\n            obs\n        }\n        setRegister(regTemp);\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`clients/${register.id}`, regTemp)\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //CADASTRO\n                const res = await api.post('clients', regTemp);\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`clients/${register.id}`);\n            loadRegisters();\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            setShow(false)\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        if (selectFilterField === 'id')\n            tempSearch = registers.filter(find =>\n                String(find.id).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        else if (selectFilterField === 'name')\n            tempSearch = registers.filter(find =>\n                String(find.name).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        else if (selectFilterField === 'document')\n            tempSearch = registers.filter(find =>\n                String(find.document).toLowerCase().indexOf(String(searchField).toLowerCase()) > -1)\n\n        setSearch(tempSearch)\n    }\n\n    const setUpdating = async (reg) => {\n        setIsUpdating(true);\n        setRegister(reg);\n        setCode(reg.code)\n        setName(reg.name)\n        setCellphone(reg.cellphone)\n        setPhone(reg.phone)\n        setCompanie(reg.companie)\n        setCompanieName(reg.companie_name)\n        setEmailAdditional(reg.email_additional)\n        setPhoneAdditional(reg.phone_additional)\n        setEdressAdditional(reg.edress_additional)\n        setEmail(reg.email)\n        setEdress(reg.edress)\n        setDocumentType(reg.document_type)\n        setDocument(reg.document)\n        setObs(reg.obs)\n        setShow(true);\n    }\n\n    const clearValues = () => {\n        setCode('')\n        setName('')\n        setCellphone('')\n        setPhone('')\n        setEmailAdditional('')\n        setPhoneAdditional('')\n        setEdressAdditional('')\n        setCompanie('')\n        setCompanieName('')\n        setEdress('')\n        setDocumentType('CPF')\n        setDocument('')\n        setObs('')\n        setShow(true);\n    }\n\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n    return (\n        <div className=\"client-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <select\n                    className=\"select-search\"\n                    onChange={e => setSelectFilterField(e.target.value)}>\n                    <option value=\"id\">Código</option>\n                    <option value=\"name\" selected>Nome</option>\n                    <option value=\"document\" selected>Documento</option>\n                </select>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n            </div>\n\n            <MDBTable responsive hover bordered>\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Nome</th>\n                        <th>Documento</th>\n                        <th>Celular</th>\n                        <th>Telefone</th>\n                        <th>Credor</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => setUpdating(reg)}\n                            key={reg.id}>\n                            <td>{reg.id}</td>\n                            <td>{reg.name}</td>\n                            <td>{reg.document}</td>\n                            <td>{reg.cellphone}</td>\n                            <td>{reg.phone}</td>\n                            <td>{reg.companie + ' - ' + reg.companie_name}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title> Cadastro de Devedores </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        register.id ?\n                            <div>\n                                <label> Código </label>\n                                <label> {': ' + register.id} </label>\n                                <br />\n                            </div>\n                            : ''\n                    }\n\n                    <label> Credor </label>\n                    <Downshift inputValue={companieName} onChange={selection => {\n                        setCompanie(selection.id)\n                        setCompanieName(selection.name)\n                        setCompanies(selection)\n                    }}\n                        itemToString={item => (item ? item.name : '')}>\n                        {({ getInputProps, getItemProps, getMenuProps, isOpen, inputValue, getRootProps }) => (\n                            <div>\n                                <div {...getRootProps({}, { suppressRefError: true })} className=\"inline\">\n                                    <input value={companie} type=\"number\" readOnly style={{ width: 80, marginRight: 5 }} />\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Pesquisa\"\n                                        value={companieName}\n                                        onChangeCapture={async e => {\n                                            setCompanieName(e.target.value)\n                                            if (!e.target.value || e.target.value.length < 3) return;\n                                            const { data } = await api.get(`companies/find-by-name/${String(e.target.value).normalize(\"NFD\")}`);\n                                            setCompanies(data);\n                                        }}\n                                        {...getInputProps()} />\n                                </div>\n                                <ul {...getMenuProps({})}>\n                                    {isOpen ? companies\n                                        .filter(item => !inputValue || item.name.toLowerCase().includes(inputValue.toLowerCase()))\n                                        .map((item) => (\n                                            <li\n                                                className=\"search-field-results\"\n                                                {...getItemProps({ key: item.id, item })}>\n                                                {`${item.id} - ${item.name}`}\n                                            </li>))\n                                        : null}\n                                </ul>\n                            </div>\n                        )}\n                    </Downshift>\n\n\n\n\n                    <label> Código </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Codigo\"\n                        value={code}\n                        onChange={e => setCode(e.target.value)} />\n\n                    <label> Nome </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Nome\"\n                        value={name}\n                        onChange={e => setName(e.target.value)} />\n\n                    <label> Celular </label>\n                    <CurrencyFormat\n                        format=\"## (##) #########\"\n                        mask=\" \"\n                        placeholder=\"Celular\"\n                        value={cellphone ? cellphone : ''}\n                        onValueChange={e => setCellphone(e.value)} />\n\n                    <label> Telefone </label>\n                    <CurrencyFormat\n                        format=\"## (##) #########\"\n                        placeholder=\"Telefone\"\n                        value={phone ? phone : ''}\n                        onValueChange={e => setPhone(e.value)} />\n\n                    <label> Telefone Adicional </label>\n                    <CurrencyFormat\n                        format=\"## (##) #########\"\n                        placeholder=\"Telefone\"\n                        value={phoneAdditional ? phoneAdditional : ''}\n                        onValueChange={e => setPhoneAdditional(e.value)} />\n\n\n                    <label> Email </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Email\"\n                        value={email}\n                        onChange={e => setEmail(e.target.value)} />\n\n                    <label> Email Adicional </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Email\"\n                        value={emailAdditional}\n                        onChange={e => setEmailAdditional(e.target.value)} />\n\n                    <div className=\"inline\">\n                        <div style={{ marginRight: 5 }}>\n                            <label> Tipo de Cliente </label>\n                            <select\n                                className=\"select-search\"\n                                onChange={e => setDocumentType(e.target.value)}>\n                                <option value=\"CPF\" selected={documentType === 'CPF' ? true : false}>CPF</option>\n                                <option value=\"CNPJ\" selected={documentType === 'CNPJ' ? true : false}>CNPJ</option>\n                            </select>\n                        </div>\n                        <div>\n                            <label> {documentType} </label>\n                            <CurrencyFormat\n                                format={documentType === 'CPF' ? \"###.###.###-##\" : \"##.###.###/####-##\"}\n                                placeholder={documentType}\n                                value={document ? document : ''}\n                                onValueChange={e => setDocument(e.value)} />\n                        </div>\n                    </div>\n\n                    <label>  Endereço </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Endereço\"\n                        value={edress}\n                        onChange={e => setEdress(e.target.value)} />\n\n                    <label>  Endereço Adicional </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Endereço\"\n                        value={edressAdditional}\n                        onChange={e => setEdressAdditional(e.target.value)} />\n\n                    <label>  Observações </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Observações do cliente\"\n                        value={obs}\n                        onChange={e => setObs(e.target.value)} />\n\n\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={() => setShow(false)} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n            <div className=\"fab-container\">\n                <button onClick={setNew}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(Client);","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport CurrencyFormat from 'react-currency-format';\nimport CurrencyInput from 'react-currency-input-field';\nimport './style.css';\nimport myFormat from '../../helpers/myFormat';\nimport api from '../../services/api';\nimport * as loadingActions from '../../store/actions/loading';\nimport * as toastActions from '../../store/actions/toast';\nimport AppBar from '../../components/AppBar';\n\n\nfunction User(props) {\n    const history = useHistory();\n    const [show, setShow] = useState(false);\n    const [search, setSearch] = useState([]);\n    const [searchField, setSearchField] = useState([]);\n    const [registers, setRegisters] = useState([]);\n    const [register, setRegister] = useState({});\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    const [name, setName] = useState('');\n    const [userName, setUserName] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [adress, setAdress] = useState('');\n    const [document, setDocument] = useState('');\n    const [identitet, setIdentitet] = useState('');\n    const [email, setEmail] = useState('');\n    const [phone, setPhone] = useState('');\n    const [obs, setObs] = useState('');\n\n\n    useEffect(() => {\n        loadRegisters();\n    }, []);\n\n    const handleSubmit = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n\n        //VALIDAÇÕES\n        if (!name) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n\n        //VALIDAÇÕES\n        if (!userName) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n        //VALIDAÇÕES\n        if (!password) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Preencha os campos obrigatórios!'));\n            return 0\n        }\n        //VALIDAÇÕES\n        if (password !== confirmPassword) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'As senhas devem ser identicas!'));\n            return 0\n        }\n\n        //CRIA OBJETO PARAR CADASTRAR/ALTERAR\n        const regTemp = {\n            name,\n            username: userName,\n            password,\n            adress,\n            document,\n            email,\n            phone,\n            identitet,\n            obs\n        }\n\n        setRegister(regTemp);\n\n        try {\n            if (isUpdating) {\n                //ALTERAÇÃO\n                const res = await api.put(`users/${register.id}`, regTemp)\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro alterado!'));\n            } else {\n                //CADASTRO\n                const res = await api.post('users', regTemp);\n                setIsUpdating(false);\n                setRegister({});\n                clearValues();\n                loadRegisters();\n                props.dispatch(toastActions.setToast(true, 'success', 'Registro cadastrado!'));\n            }\n            setShow(false)\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const handleDelete = async () => {\n        props.dispatch(loadingActions.setLoading(true));\n        try {\n            const res = await api.delete(`users/${register.id}`);\n            setIsUpdating(false);\n            setRegister({});\n            clearValues();\n            loadRegisters();\n            setShow(false)\n            props.dispatch(toastActions.setToast(true, 'success', 'Registro deletado!'));\n        } catch (error) {\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n        props.dispatch(loadingActions.setLoading(false));\n    }\n\n\n    const loadRegisters = async () => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get('users')\n            setRegisters(res.data);\n            setSearch(res.data)\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const handleSearch = async () => {\n        var tempSearch = [];\n        tempSearch = registers.filter(find =>\n            find.name.toLowerCase().indexOf(String(searchField).toLowerCase()) > -1\n        )\n        setSearch(tempSearch)\n    }\n\n    const clearValues = () => {\n        setRegister({});\n        setName('');\n        setUserName('');\n        setPassword('');\n        setConfirmPassword('');\n        setAdress('');\n        setDocument('');\n        setIdentitet('');\n        setPhone('');\n        setEmail('');\n        setObs('');\n    }\n\n\n    const setUpdating = (reg) => {\n        setIsUpdating(true);\n        setRegister(reg);\n        setName(reg.name);\n        setUserName(reg.username);\n        setPassword(reg.password);\n        setConfirmPassword(reg.password);\n        setAdress(reg.adress);\n        setDocument(reg.document);\n        setIdentitet(reg.identitet);\n        setPhone(reg.phone);\n        setEmail(reg.email);\n        setObs(reg.obs);\n        setShow(true);\n    }\n\n    const hide = async (reg) => {\n        setShow(false);\n        clearValues();\n        setIsUpdating(false);\n    }\n\n    const setNew = () => {\n        setIsUpdating(false);\n        clearValues();\n        setShow(true);\n    }\n\n    return (\n        <div className=\"user-container\">\n            <AppBar />\n            <div className=\"filters\">\n                <label> Nome: </label>\n                <input\n                    className=\"field-search\"\n                    value={searchField}\n                    onChange={e => setSearchField(e.target.value)}\n                    type=\"text\"\n                    onKeyPress={handleSearch} />\n            </div>\n\n            <MDBTable responsive hover bordered className=\"table\">\n                <MDBTableHead>\n                    <tr>\n                        <th>Código</th>\n                        <th>Nome</th>\n                        <th>Usuário</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {search.map(reg => (\n                        <tr\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => setUpdating(reg)}\n                            key={reg.id}>\n                            <td>{reg.id}</td>\n                            <td>{reg.name}</td>\n                            <td>{reg.username}</td>\n                        </tr>\n                    ))}\n                </MDBTableBody>\n            </MDBTable>\n\n            <Modal show={show} onHide={() => console.log('Cant close')}>\n                <Modal.Header>\n                    <Modal.Title>Cadastro de Usuários</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        register.id ?\n                            <div>\n                                <label> Código </label>\n                                <label> {': ' + register.id} </label>\n                                <br />\n                            </div>\n                            : ''\n                    }\n                    <label> Nome </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Nome\"\n                        value={name}\n                        onChange={e => setName(e.target.value)} />\n\n                    <label> Usuário </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Usuário\"\n                        value={userName}\n                        onChange={e => setUserName(e.target.value)} />\n\n                    <label> Telefone </label>\n                    <CurrencyFormat\n                        format=\"## (##) #########\"\n                        placeholder=\"Telefone\"\n                        value={phone ? phone : ''}\n                        onValueChange={e => setPhone(e.value)} />\n\n                    <label> Email </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Email\"\n                        value={email}\n                        onChange={e => setEmail(e.target.value)} />\n\n                    <label>  Endereço </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Endereço\"\n                        value={adress}\n                        onChange={e => setAdress(e.target.value)} />\n\n                    <label> CPF </label>\n                    <CurrencyFormat\n                        format=\"###.###.###-##\"\n                        placeholder=\"CPF\"\n                        value={document ? document : ''}\n                        onValueChange={e => setDocument(e.value)}\n                        on />\n\n                    <label> Identidade </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Identidade\"\n                        value={identitet}\n                        onChange={e => setIdentitet(e.target.value)} />\n\n                    <label> Senha </label>\n                    <input\n                        type=\"password\"\n                        placeholder=\"Senha\"\n                        value={password}\n                        onChange={e => setPassword(e.target.value)} />\n\n                    <label> Repita a Senha </label>\n                    <input\n                        type=\"password\"\n                        placeholder=\"Repita a senha\"\n                        value={confirmPassword}\n                        onChange={e => setConfirmPassword(e.target.value)} />\n\n                    <label> Obs </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Observação\"\n                        value={obs}\n                        onChange={e => setObs(e.target.value)} />\n                </Modal.Body>\n                <div className=\"modal-footer-container\">\n                    <button onClick={handleSubmit}> Salvar </button>\n                    {isUpdating ? <button onClick={handleDelete} style={{ backgroundColor: '#ff6666' }} > Apagar </button> : <></>}\n                    <button onClick={() => setShow(false)} style={{ backgroundColor: '#668cff' }} > Fechar </button>\n                </div>\n            </Modal>\n\n\n            <div className=\"fab-container\">\n                <button onClick={setNew}> + </button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(state => ({ state }))(User);","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport Collect from './pages/Collect';\nimport ImportCollects from './pages/ImportCollects';\nimport Companie from './pages/Companie';\nimport Attendance from './pages/Attendance'\nimport NotFound from './pages/NotFound';\nimport Client from './pages/Client';\nimport User from './pages/User';\n\nexport default function Routes() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/\" component={Login} />\n                <Route exact path=\"/dashboard\" component={Dashboard} />\n                <Route exact path=\"/attendance\" component={Attendance} />\n                <Route exact path=\"/collect\" component={Collect} />\n                <Route exact path=\"/import-collects\" component={ImportCollects} />\n                <Route exact path=\"/companie\" component={Companie} />\n                <Route exact path=\"/client\" component={Client} />\n                <Route exact path=\"/user\" component={User} />\n                <Route path='*' component={NotFound} />\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","const INITIAL_STATE = {\n    visible: false\n}\n\nexport default function loading(state = INITIAL_STATE, action) {\n    if (action.type === 'SET_LOADING') {\n        return {\n            ...state, \n            visible: action.visible,\n        }\n    }\n    return state;\n}","const INITIAL_STATE = {\n    visible: false,\n    style: '',\n    message: ''\n}\n\nexport default function loading(state = INITIAL_STATE, action) {\n    if (action.type === 'SET_TOAST') {\n        return {\n            ...state, \n            visible: action.visible,\n            style: action.type,\n            message: action.message\n        }\n    }\n    return state;\n}","const INITIAL_STATE = {\n    visible:  false,\n    table: '',\n    value: ''\n}\n\nexport default function callBackValue(state = INITIAL_STATE, action) {\n    if (action.type === 'SET_CALLBACK') {\n        return {\n            ...state, \n            visible: action.visible,\n            value: action.value,\n            table: action.table\n        }\n    }\n    return state;\n}","const INITIAL_STATE = {\n    id: 0,\n    name: ''\n}\n\nexport default function userValue(state = INITIAL_STATE, action) {\n    if (action.type === 'SET_USER') {\n        return {\n            ...state, \n            id: action.id,\n            name: action.name\n        }\n    }\n    return state;\n}","import { combineReducers } from 'redux';\n\nimport loading from './loading';\nimport toast from './toast';\nimport callback from './callback';\nimport user from './user';\n\nexport default combineReducers ({\n    loading,\n    toast,\n    callback,\n    user\n})","import { createStore } from 'redux';\n\nimport rootReducers from './reducers';\n\nconst store = createStore(rootReducers);\n\nexport default store;","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport './style.css';\n\nfunction Loading(props) {\n\n    return (\n        <div\n            className=\"loading-container\"\n            style={props.state.loading.visible ? { height: '100%' } : { height: '0' }}>\n            {props.state.loading.visible ?\n                <Spinner\n                    animation=\"grow\"\n                    variant=\"success\"\n                    className=\"loading-spinner\" />\n                : <></>}\n        </div >\n    );\n}\nexport default connect(state => ({ state }))(Loading);","import React from 'react';\nimport { Toast } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport './style.css';\nimport * as toastActions from '../../store/actions/toast';\n\nfunction ToastApp(props) {\n    return (\n        <div className=\"toast-container\">\n            <Toast \n                autohide\n                delay=\"5000\"\n                className=\"toast\"\n                show={props.state.toast.visible} \n                onClose={() => props.dispatch(toastActions.setToast(false, '', ''))} >\n                <Toast.Header>\n                    <strong className=\"mr-auto\">SG</strong>\n                </Toast.Header>\n                <Toast.Body>{props.state.toast.message}</Toast.Body>\n            </Toast>\n        </div>\n    );\n}\nexport default connect(state => ({ state }))(ToastApp);","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport { Modal } from 'react-bootstrap';\nimport './style.css';\n\nimport api from '../../services/api';\n\nimport * as loadingActions from '../../store/actions/loading';\nimport * as callBackActions from '../../store/actions/callback';\nimport * as toastActions from '../../store/actions/toast';\n\nfunction CallBack(props) {\n    const [registers, setRegisters] = useState([]);\n\n    const handleSearch = async (name) => {\n        try {\n            props.dispatch(loadingActions.setLoading(true));\n            const res = await api.get(props.state.callback.table + '/find-by-name/' + name)\n            if (res.data.error) {\n                props.dispatch(loadingActions.setLoading(false));\n                props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + res.data.error));\n                return 0;\n            }\n            setRegisters(res.data);\n            props.dispatch(loadingActions.setLoading(false));\n        } catch (error) {\n            props.dispatch(loadingActions.setLoading(false));\n            props.dispatch(toastActions.setToast(true, 'success', 'Houve um erro ' + error.message));\n        }\n    }\n\n    return (\n        <div\n            className=\"callback-container\"\n            style={props.state.callback.visible ? { height: '100%' } : { height: '0' }}>\n            {props.state.callback.visible ?\n                <Modal className=\"modal callback\" show={props.state.callback.visible} onHide={() => props.dispatch(callBackActions.setCallback(false, '', ''))}>\n                    <Modal.Header>\n                        <Modal.Title> Consulta de registros </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className=\"filters\">\n                            <input\n                                className=\"field-search\"\n                                placeholder=\"Busca por nome\"\n                                onChange={e => handleSearch(e.target.value)}\n                                type=\"text\" />\n                        </div>\n\n                        <MDBTable responsive hover bordered className=\"table\">\n                            <MDBTableHead>\n                                <tr>\n                                    <th>Código</th>\n                                    <th>Nome</th>\n                                </tr>\n                            </MDBTableHead>\n                            <MDBTableBody>\n                                {registers.map(reg => (\n                                    <tr key={reg.id}>\n                                        <td>{reg.id}</td>\n                                        <td>{reg.name}</td>\n                                    </tr>\n                                ))}\n                            </MDBTableBody>\n                        </MDBTable>\n                    </Modal.Body>\n                </Modal>\n                : <></>}\n        </div >\n    );\n}\nexport default connect(state => ({ state }))(CallBack);","\nexport function setCallback(visible, table, value) {\n    return {\n        type: 'SET_CALLBACK',\n        visible,\n        table,\n        value,\n    }\n}","import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport moment from 'moment';\nimport ptbr from 'moment/locale/pt-br'\nimport Routes from './Routes'\nimport store from './store';\n\nimport Loading from './components/Loading';\nimport ToastApp from './components/ToastApp';\nimport CallBack from './components/CallBack';\n\n\nfunction App() {\n  useEffect(()=> {\n    moment().locale('pt-br');\n  },[])\n\n  return (\n    <Provider store={store}>\n      <Routes />\n      <Loading />\n      <ToastApp />\n      <CallBack />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/login.0b9d121c.png\";","const strValueToFloat = (str) => {\n    var r = str + '';\n    r = r.replace(' ','')\n    r = r.replace('R$','')\n    r = r.replace('.','')\n    r = r.replace(',','.')\n    return r ? parseFloat(r) : 0\n}\n\nconst floatValueToStr = (flt) => {\n    r = parseFloat(flt?flt:0);\n    var r = parseFloat(r.toFixed(2)) + '';\n    r = r.replace('.',',')\n    return r ? r : '0,00'\n}\n\nconst configSheetStr = (str) => {\n    var r =  str + ''\n    r =  r.replace(' ','')\n    r =  r.replace('R$','')\n    r =  r.replace('.','+')\n    r =  r.replace(',','.')\n    r =  r.replace('+',',')\n    return  r ? r : '0,00'\n}\n\n\n\nmodule.exports = {\n    strValueToFloat,\n    floatValueToStr,\n    configSheetStr\n}"],"sourceRoot":""}